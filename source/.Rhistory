else { # Los lugares sin zona climática le asignamos el 0, para luego eliminar estas observaciones
zona_climatica <- c(zona_climatica,0)
}
}
# Creamos dataframe de zonas climáticas
zonas_climaticas <- data.frame(levels(db$Location),zona_climatica) %>% rename(Location=levels.db.Location.)
zonas_climaticas %>% View()
# Chunk 7: Información por zona climática
# Añadimos las zonas climáticas
db <- left_join(zonas_climaticas,db, by="Location",strings)
db$Location <- db$Location %>% as.factor()
# Eliminamos la zona climática 0
db <- db %>% filter(., zona_climatica != 0)
db <- droplevels(db)
#db$zona_climatica <- db$zona_climatica %>% as.factor()
# Contamos valores totales por zona climática:
db %>% count(zona_climatica) %>% View()
# Contamos cantidad de ciudades por zona climática
db %>% count(zona_climatica,Location) %>%count(zona_climatica,name="n_locations") %>%  View()
# Comprobamos datos continuos
db %>% count(zona_climatica,Location) %>% View() # esto confirma que tenemos 1272 datos para cada ciudad
dates_df <- date_range()
dates_df %>% View()
# Chunk 8
db_zone1 <- db %>% filter(., zona_climatica == 1) %>% select(., -zona_climatica)
db_zone1 <- droplevels(db_zone1)
db_zone2 <- db %>% filter(., zona_climatica == 2) %>% select(., -zona_climatica)
db_zone2 <- droplevels(db_zone2)
db_zone3 <- db %>% filter(., zona_climatica == 3) %>% select(., -zona_climatica)
db_zone3 <- droplevels(db_zone3)
db_zone4 <- db %>% filter(., zona_climatica == 4) %>% select(., -zona_climatica)
db_zone4 <- droplevels(db_zone4)
db_zone5 <- db %>% filter(., zona_climatica == 5) %>% select(., -zona_climatica)
db_zone5 <- droplevels(db_zone5)
db_zone6 <- db %>% filter(., zona_climatica == 6) %>% select(., -zona_climatica)
db_zone6 <- droplevels(db_zone6)
db_zone7 <- db %>% filter(., zona_climatica == 7) %>% select(., -zona_climatica)
db_zone7 <- droplevels(db_zone7)
db_zone8 <- db %>% filter(., zona_climatica == 8) %>% select(., -zona_climatica)
db_zone8 <- droplevels(db_zone8)
# Creamos diccionario con los df para poder iterar
zonas <- list("zona1"=db_zone1,
"zona2"=db_zone2,
"zona3"=db_zone3,
"zona4"=db_zone4,
"zona5"=db_zone5,
"zona6"=db_zone6,
"zona7"=db_zone7,
"zona8"=db_zone8)
print(nrow(db) == (nrow(db_zone1) + nrow(db_zone2) + nrow(db_zone3) + nrow(db_zone4) + nrow(db_zone5) + nrow(db_zone6) + nrow(db_zone7) + nrow(db_zone8)))
# Chunk 9: Detect missings
# Crear función de comprobar missings
# counting missing values
get_missings <- function(){
df_missings <- NULL;
total_rows <- c()
for(i in 1:length(zonas)){
row <- zonas[[i]] %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))*100 / nrow(zonas[[i]])
total_rows <- c(total_rows,nrow(zonas[[i]]))
df_missings <- df_missings %>% rbind(.,row)
}
df_missings["Total obs"] <- total_rows
rownames(df_missings) <- c("zona1",
"zona2",
"zona3",
"zona4",
"zona5",
"zona6",
"zona7",
"zona8")
return(df_missings)
}
df_missings <- get_missings()
df_missings %>% View()
# Vamos a eliminar todas las variables que tienen el 100% de NA en la zona8, esto es,
# Evaporation, Sunshine, Pressure9am, Pressure3pm, Cloud9am, Cloud3pm, ya que hay indicativos de que esta información ha sido grabada incorrectamente (con un alto número de NAs para todas las zonas climáticas).
# Chunk 10
for(i in 1:length(zonas)){
zonas[[i]] <- zonas[[i]] %>% select(., -any_of(c("Evaporation", "Sunshine", "Pressure9am", "Pressure3pm", "Cloud9am", "Cloud3pm")))
}
# Chunk 11
calc_mode <- function(x){
# List the distinct / unique values
distinct_values <- unique(x)
# Count the occurrence of each distinct value
distinct_tabulate <- tabulate(match(x, distinct_values))
top <- which.max(distinct_tabulate)
# Return the value with the highest occurrence
mode <- distinct_values[top]
if(is.na(mode)){
top <- distinct_tabulate[distinct_tabulate!=distinct_tabulate[top]] %>% which.max()
mode <- distinct_values[top]
}
return(mode)
}
# Chunk 12: Replace missings
# mutate missing values
columnas_enteras <- zonas[[1]][, unlist(lapply(zonas[[1]], is.integer), use.names = FALSE) ] %>% colnames()
columnas_numericas <- zonas[[1]][, unlist(lapply(zonas[[1]], is.numeric), use.names = FALSE) ] %>% colnames() %>% setdiff(.,columnas_enteras)
columnas_categoricas <- zonas[[1]][, unlist(lapply(zonas[[1]], is.factor), use.names = FALSE) ] %>% colnames()
# reemplazamos variables continuas por la media
for(i in 1:length(zonas)){
zonas[[i]] <- zonas[[i]] %>% mutate_at(columnas_numericas, ~replace_na(.,mean(., na.rm = TRUE)))
}
# reemplazamos variables enteras por la media truncada
for(i in 1:length(zonas)){
zonas[[i]] <- zonas[[i]] %>% mutate_at(columnas_enteras, ~replace_na(.,floor(mean(., na.rm = TRUE))))
}
# reemplazamos variables categóricas por la moda
for(i in 1:length(zonas)){
zonas[[i]] <- zonas[[i]] %>% mutate_at(columnas_categoricas, ~replace_na(.,calc_mode(.)))
}
df_missings <- get_missings()
df_missings %>% View()
encoding_vars <- c("Location", "RainToday","RainTomorrow")
zonas[[1]] %>% pivot_wider(names_from = Location,
values_from = Location,
values_fill = list(Location = F),
values_fn = list(Location = is.character)) %>% View()
zonas[[1]]$Location %>% levels()
encoding_vars <- c("Location", "RainToday","RainTomorrow")
zonas[[1]] %>% pivot_wider(names_from = Location,
values_from = Location,
values_fill = list(Location = T),
values_fn = list(Location = is.character)) %>% View()
zonas[[1]] %>% head() %>% View()
encoding_vars <- c("Location", "RainToday","RainTomorrow")
zonas[[1]] %>% pivot_wider(names_from = Location,
values_from = Location,
values_fill = list(Location = T),
values_fn = list(Location = is.character)) %>% View()
encoding_vars <- c("Location", "RainToday","RainTomorrow")
zonas[[1]] %>% pivot_wider(names_from = Location,
values_from = Location,
values_fill = list(Location = F)) %>% View()
#values_fn = list(Location = is.character)
encoding_vars <- c("Location", "RainToday","RainTomorrow")
zonas[[1]] %>% pivot_wider(names_from = Location,
values_from = Location,
values_fill = list(Location = F),
values_fn = list(Location = is.character)) %>% View()
encoding_vars <- c("Location", "RainToday","RainTomorrow")
zonas[[1]] %>% pivot_wider(names_from = Location,
values_from = Location,
values_fill = list(Location = 0),
values_fn = list(Location = is.character)) %>% View()
encoding_vars <- c("Location", "RainToday","RainTomorrow")
zonas[[1]] %>% pivot_wider(names_from = Location,
values_from = Location,
values_fill = list(Location = 0),
values_fn = list(Location = is.character)) %>% View()
is.null(0)
is.character(0)
encoding_vars <- c("Location", "RainToday","RainTomorrow")
zonas[[1]] %>% pivot_wider(names_from = Location,
values_from = Location,
values_fill = list(Location = 0)) %>% View()
id(3)
indentity(3)
identity(3)
encoding_vars <- c("Location", "RainToday","RainTomorrow")
zonas[[1]] %>% pivot_wider(names_from = Location,
values_from = Location,
values_fill = list(Location = 0),
values_fn = list(Location = identity)) %>% View()
encoding_vars <- c("Location", "RainToday","RainTomorrow")
zonas[[1]] %>% pivot_wider(names_from = Location,
values_from = Location,
values_fill = list(Location = F),
values_fn = list(Location = identity)) %>% View()
as.factor(c(TRUE,FALSE))
encoding_vars <- c("Location", "RainToday","RainTomorrow")
zonas[[1]] %>% pivot_wider(names_from = Location,
values_from = Location,
values_fill = list(Location = F),
values_fn = list(Location = as.factor)) %>% View()
toString(TRUE)
encoding_vars <- c("Location", "RainToday","RainTomorrow")
zonas[[1]] %>% pivot_wider(names_from = Location,
values_from = Location,
values_fill = list(Location = F),
values_fn = list(Location = toString)) %>% View()
encoding_vars <- c("Location", "RainToday","RainTomorrow")
zonas[[1]] %>% pivot_wider(names_from = Location,
values_from = Location,
values_fill = list(Location = F),
values_fn = list(Location = identity)) %>% View()
encoding_vars <- c("Location", "RainToday","RainTomorrow")
zonas[[1]] %>% pivot_wider(names_from = Location,
values_from = Location,
values_fill = list(Location = F),
values_fn = list(Location = as.factor)) %>% View()
as.factor(c(TRUE,FALSE))
encoding_vars <- c("Location", "RainToday","RainTomorrow")
zonas[[1]] %>% pivot_wider(names_from = Location,
values_from = Location,
values_fill = list(Location = F),
values_fn = list(Location = is.character)) %>% View()
encoding_vars <- c("Location", "RainToday","RainTomorrow")
zonas[[1]] %>% pivot_wider(names_from = Location,
values_from = Location,
values_fill = list(Location = F),
values_fn = list(Location = as.logical)) %>% View()
dmy <- dummyVars(" ~ Location+RainToday+RainTomorrow", data = zonas[[1]])
trsf <- data.frame(predict(dmy, newdata = zonas[[1]]))
trsf %>% head() %>% View()
dmy <- dummyVars(" ~ Location+RainToday+RainTomorrow", data = zonas[[1]])
trsf <- data.frame(predict(dmy, newdata = zonas[[1]]))
trsf %>% ncol()
dmy <- dummyVars(" ~ Location+RainToday+RainTomorrow", data = zonas[[1]])
trsf <- data.frame(predict(dmy, newdata = zonas[[1]]))
trsf %>% nrow()
dmy <- dummyVars( ~ .-c("WindGustDir","WindDir9am","WindDir3pm"), data = zonas[[1]])
trsf <- data.frame(predict(dmy, newdata = zonas[[1]]))
trsf %>% head() %>% View()
dmy <- dummyVars( ~ .-"WindGustDir"-"WindDir9am"-"WindDir3pm"), data = zonas[[1]])
trsf <- data.frame(predict(dmy, newdata = zonas[[1]]))
trsf %>% head() %>% View()
dmy <- dummyVars( ~ .-WindGustDir-WindDir9am-WindDir3pm, data = zonas[[1]])
trsf <- data.frame(predict(dmy, newdata = zonas[[1]]))
trsf %>% head() %>% View()
columnas_categoricas
dmy <- dummyVars( ~ .-WindGustDir-WindDir9am-WindDir3pm-Date, data = zonas[[1]])
trsf <- data.frame(predict(dmy, newdata = zonas[[1]]))
trsf %>% head() %>% View()
dmy <- dummyVars( ~ +Location+RainToday+RainTomorrow, data = zonas[[1]])
trsf <- data.frame(predict(dmy, newdata = zonas[[1]]))
trsf %>% head() %>% View()
# Iterar por zonas
dmy <- dummyVars( ~ +Location+RainToday+RainTomorrow, data = zonas[[1]])
trsf <- data.frame(predict(dmy, newdata = zonas[[1]]))
zonas[[1]] <- zonas[[1]][,-c("Location","RainToday","RainTomorrow")] %>% cbind(.,trsf)
zonas[[1]] %>% head() %>% View()
# Iterar por zonas
dmy <- dummyVars( ~ +Location+RainToday+RainTomorrow, data = zonas[[1]])
trsf <- data.frame(predict(dmy, newdata = zonas[[1]]))
zonas[[1]] <- zonas[[1]] %>% select(., -any_of(c("Location","RainToday","RainTomorrow"))) %>% cbind(.,trsf)
zonas[[1]] %>% head() %>% View()
levels(zonas[[1]]$WindGustDir)
pi
sin(15*pi/8)
cos(15*pi/8)
radianes <- list("E"=0,"ENE"=pi/8, "NE"=pi/4, "NNE"=3*pi/8, "N" = pi/2,"NNW"=5*pi/8,"NW"=3*pi/4,"WNW"=7*pi/8,"W"=pi,"WSW"=9*pi/8,"SW"=5*pi/4,"SSW"=11*pi/8,"S"=3*pi/2,"SSE"=13*pi/8,"SE"=7*pi/4,"ESE"=15*pi/8)
length(radianes)
levels(zonas[[1]]$WindGustDir)
radianes <- list("E"=0,"ENE"=pi/8, "NE"=pi/4, "NNE"=3*pi/8,
"N" = pi/2,"NNW"=5*pi/8,"NW"=3*pi/4,"WNW"=7*pi/8,
"W"=pi,"WSW"=9*pi/8,"SW"=5*pi/4,"SSW"=11*pi/8,
"S"=3*pi/2,"SSE"=13*pi/8,"SE"=7*pi/4,"ESE"=15*pi/8)
levels(zonas[[1]]$WindGustDir) <- radianes
radianes <- list("E"=0,"ENE"=pi/8, "NE"=pi/4, "NNE"=3*pi/8,
"N" = pi/2,"NNW"=5*pi/8,"NW"=3*pi/4,"WNW"=7*pi/8,
"W"=pi,"WSW"=9*pi/8,"SW"=5*pi/4,"SSW"=11*pi/8,
"S"=3*pi/2,"SSE"=13*pi/8,"SE"=7*pi/4,"ESE"=15*pi/8)
levels(zonas[[1]]$WindGustDir)
levels(zonas[[1]]$WindGustDir) %>% as.numeric()
zonas[[1]] %>% transform(., WindGustDir=radianes[toString(WindGustDir)]) %>% head() %>% View()
toString(WindGustDir)
radianes["E"]
radianes["NE"]
radianes[c("NE","SSE")]
radianes[c("NE","SSE","NE")]
WindGustDir
WindGustDir %>% as.character()
# Chunk 1
library(tidyverse)
library(kableExtra)
library(ggpubr)
library(randomForest)
library(mlbench)
library(caret)
library(FactoMineR)
library(factoextra)
library(mltools)
library(data.table)
# Chunk 2
x <- "rep(\"---\", 6)"
xnew <- "---"
db <- read.csv("../db/weatherAUS.csv", stringsAsFactors = TRUE)
db$Date <- as.Date(db$Date, format="%Y-%m-%d")
attach(db)
db %>% head() %>%  select(-c(6:19)) %>% add_column(.,rep("---",6),.after = 5) %>% rename(., !!xnew := !!rlang::sym(x)) %>% kbl(., booktabs = T,caption = "Muestra de los datos[note]",) %>% kable_styling(latex_options = c("striped", "scale_down"))
# Voy a descomponer en:
# - trend
# - seasonality
# - noise
#
# SMA(n):moving average of last n days --> smoothing
# decompose()
# Chunk 3: Tipos de datos
# Buscar manera alternativa (representable) de evaluar los tipos de dato.
str(db)
# Chunk 4: Rangos de fechas
# Creamos función que comprueba rango de fechas
err_cities <- c()
date_range <- function(){
# Inicializamos los vectores
min_fec <- c()
max_fec <- c()
obs <- c()
rep <- c()
n_diff_dates_vec <- c()
top_diff_date_vec <- c()
range_free_vec <- c()
# Iteramos por cada ciudad
for(city in levels(db$Location)){
# Filtramos el ds por ciudad
db_filtered <- db %>% filter(.,Location==city)
# Calculamos y almacenamos el mínimo y el máximo de la variable Date
mind <- format(as.Date(min(db_filtered$Date),format="%Y-%m-%d"))
min_fec <- c(min_fec,mind)
maxd <- format(as.Date(max(db_filtered$Date),format="%Y-%m-%d"))
max_fec <- c(max_fec,maxd)
# Comprobamos rangos de fecha
fech_range <- seq(mind %>% as.Date(), maxd %>% as.Date(), "days")
diff_dates <- setdiff(fech_range,db_filtered$Date) %>% as.Date(., origin="1970-01-01")
if(length(diff_dates)>0){ # hay fechas faltantes
top_diff_date <- max(diff_dates) %>% as.Date(., origin="1970-01-01")
top_diff_date_vec <- c(top_diff_date_vec,top_diff_date)
n_diff_dates <- length(diff_dates)
n_diff_dates_vec <- c(n_diff_dates_vec,n_diff_dates)
range_free <- seq(top_diff_date %>% as.Date(),maxd %>% as.Date(), "days") %>% length()
range_free_vec <- c(range_free_vec,range_free)
} else {
top_diff_date_vec <- c(top_diff_date_vec,NA)
n_diff_dates_vec <- c(n_diff_dates_vec,0)
range_free_vec <- c(range_free_vec,NA)
}
obs <- c(obs,length(db_filtered$Date))
rep <- c(rep,length(unique(db_filtered$Date))!=length(db_filtered$Date))
}
dates_df <- data.frame(min_fec,max_fec,obs,rep,n_diff_dates_vec,top_diff_date_vec,range_free_vec, stringsAsFactors=TRUE)
dates_df$min_fec <- as.Date(dates_df$min_fec, format="%Y-%m-%d")
dates_df$max_fec <- as.Date(dates_df$max_fec, format="%Y-%m-%d")
dates_df <- mutate(dates_df, range = max_fec - min_fec+1)
dates_df$top_diff_date_vec <- dates_df$top_diff_date_vec %>% as.Date(., origin="1970-01-01")
rownames(dates_df) <- levels(db$Location)
dates_df <- dates_df %>% rename(n_diff_dates=n_diff_dates_vec, top_diff_date=top_diff_date_vec, range_free = range_free_vec)
return(dates_df)
}
dates_df <- date_range()
dates_df %>% View()
# Chunk 5: Filtramos por fecha mayor a 2013-12-31 y menor a 2017-06-24
# Rango de a 2013-12-31 y menor a 2017-06-24
db <- db %>% filter(.,Date>as.Date("2013-12-31") & Date<=as.Date("2017-06-24"))
# Comprobamos datos limpios
dates_df <- date_range()
dates_df %>% View()
# Chunk 6: Agrupamos por zonas climáticas
# Creamos vectores de zonas climáticas
zona1 <- c("Exmouth", "Dampier", "PortHedland", "Broome", "Derby", "Wyndham", "TimberCreek", "Katherine","Darwin", "Oenpelli", "Borroloola", "Nhulunbuy","Burketown", "Weipa", "Cooktown", "Cairns", "Townsville")
zona2 <- c("Mackay", "Rockhampton", "Maryborough", "Brisbane", "CoffsHarbour","GoldCoast")
zona3 <- c("Goondiwindi", "Taroom","Charleville", "Longreach","Thargomindah","Birdsville","MountIsa","AliceSprings","Kulgera","Yulara","Telfer","Newman", "GascoyneJunction","Carnavon","Uluru")
zona4 <- c("Woomera","Yalgoo", "Wiluna", "KalgoorlieBoulder", "Norseman", "Merredin","Newdegate","Warburton", "Amata","Oodnadatta","CooberPedy", "Nullarbor", "Innamincka","Whyalla","BrokenHill","Tibooburra","Bourke","Ivanhoe","Mildura","Griffith","Albury","WaggaWagga","Wodonga","Dubbo","Tamworth","Shepparton","Cobar","Moree","Nhil")
zona5 <- c("Geraldton","Perth","Witchcliffe","Bunbury","MargaretRiver","Esperance","Eucla","Ceduna","PortLincoln","Adelaide","LeighCreek","Renmark","Wollongong","Sydney","SydneyAirport","Newcastle","PortMacquaire","NorahHead","PearceRAAF","Penrith","PerthAirport")
zona6 <- c("Albany","Burra","Kingscote","KingstonSE","MountGambier","Horsham","Watsonia","Melbourne","LakesEntrance","BadgerysCreek","Bendigo","Dartmoor","MelbourneAirport","Nuriootpa","Sale","SalmonGums")
zona7 <- c("Ballarat","Canberra","Bathurst","Devonport","Strahan","Launceston","Swansea","Hobart","Southport","Tuggeranong")
zona8 <- c("MountGinini")
zonas <- c(zona1,zona2,zona3,zona4,zona5,zona6,zona7,zona8)
zona_climatica <- c()
# Asignamos cada ciudad a una zona climática
for(city in levels(db$Location)){
if(city %in% zona1){
zona_climatica <- c(zona_climatica,1)
}
else if(city %in% zona2){
zona_climatica <- c(zona_climatica,2)
}
else if(city %in% zona3){
zona_climatica <- c(zona_climatica,3)
}
else if(city %in% zona4){
zona_climatica <- c(zona_climatica,4)
}
else if(city %in% zona5){
zona_climatica <- c(zona_climatica,5)
}
else if(city %in% zona6){
zona_climatica <- c(zona_climatica,6)
}
else if(city %in% zona7){
zona_climatica <- c(zona_climatica,7)
}
else if(city %in% zona8){
zona_climatica <- c(zona_climatica,8)
}
else { # Los lugares sin zona climática le asignamos el 0, para luego eliminar estas observaciones
zona_climatica <- c(zona_climatica,0)
}
}
# Creamos dataframe de zonas climáticas
zonas_climaticas <- data.frame(levels(db$Location),zona_climatica) %>% rename(Location=levels.db.Location.)
zonas_climaticas %>% View()
# Chunk 7: Información por zona climática
# Añadimos las zonas climáticas
db <- left_join(zonas_climaticas,db, by="Location",strings)
db$Location <- db$Location %>% as.factor()
# Eliminamos la zona climática 0
db <- db %>% filter(., zona_climatica != 0)
db <- droplevels(db)
#db$zona_climatica <- db$zona_climatica %>% as.factor()
# Contamos valores totales por zona climática:
db %>% count(zona_climatica) %>% View()
# Contamos cantidad de ciudades por zona climática
db %>% count(zona_climatica,Location) %>%count(zona_climatica,name="n_locations") %>%  View()
# Comprobamos datos continuos
db %>% count(zona_climatica,Location) %>% View() # esto confirma que tenemos 1272 datos para cada ciudad
dates_df <- date_range()
dates_df %>% View()
# Chunk 8
db_zone1 <- db %>% filter(., zona_climatica == 1) %>% select(., -zona_climatica)
db_zone1 <- droplevels(db_zone1)
db_zone2 <- db %>% filter(., zona_climatica == 2) %>% select(., -zona_climatica)
db_zone2 <- droplevels(db_zone2)
db_zone3 <- db %>% filter(., zona_climatica == 3) %>% select(., -zona_climatica)
db_zone3 <- droplevels(db_zone3)
db_zone4 <- db %>% filter(., zona_climatica == 4) %>% select(., -zona_climatica)
db_zone4 <- droplevels(db_zone4)
db_zone5 <- db %>% filter(., zona_climatica == 5) %>% select(., -zona_climatica)
db_zone5 <- droplevels(db_zone5)
db_zone6 <- db %>% filter(., zona_climatica == 6) %>% select(., -zona_climatica)
db_zone6 <- droplevels(db_zone6)
db_zone7 <- db %>% filter(., zona_climatica == 7) %>% select(., -zona_climatica)
db_zone7 <- droplevels(db_zone7)
db_zone8 <- db %>% filter(., zona_climatica == 8) %>% select(., -zona_climatica)
db_zone8 <- droplevels(db_zone8)
# Creamos diccionario con los df para poder iterar
zonas <- list("zona1"=db_zone1,
"zona2"=db_zone2,
"zona3"=db_zone3,
"zona4"=db_zone4,
"zona5"=db_zone5,
"zona6"=db_zone6,
"zona7"=db_zone7,
"zona8"=db_zone8)
print(nrow(db) == (nrow(db_zone1) + nrow(db_zone2) + nrow(db_zone3) + nrow(db_zone4) + nrow(db_zone5) + nrow(db_zone6) + nrow(db_zone7) + nrow(db_zone8)))
# Chunk 9: Detect missings
# Crear función de comprobar missings
# counting missing values
get_missings <- function(){
df_missings <- NULL;
total_rows <- c()
for(i in 1:length(zonas)){
row <- zonas[[i]] %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))*100 / nrow(zonas[[i]])
total_rows <- c(total_rows,nrow(zonas[[i]]))
df_missings <- df_missings %>% rbind(.,row)
}
df_missings["Total obs"] <- total_rows
rownames(df_missings) <- c("zona1",
"zona2",
"zona3",
"zona4",
"zona5",
"zona6",
"zona7",
"zona8")
return(df_missings)
}
df_missings <- get_missings()
df_missings %>% View()
# Vamos a eliminar todas las variables que tienen el 100% de NA en la zona8, esto es,
# Evaporation, Sunshine, Pressure9am, Pressure3pm, Cloud9am, Cloud3pm, ya que hay indicativos de que esta información ha sido grabada incorrectamente (con un alto número de NAs para todas las zonas climáticas).
# Chunk 10
for(i in 1:length(zonas)){
zonas[[i]] <- zonas[[i]] %>% select(., -any_of(c("Evaporation", "Sunshine", "Pressure9am", "Pressure3pm", "Cloud9am", "Cloud3pm")))
}
# Chunk 11
calc_mode <- function(x){
# List the distinct / unique values
distinct_values <- unique(x)
# Count the occurrence of each distinct value
distinct_tabulate <- tabulate(match(x, distinct_values))
top <- which.max(distinct_tabulate)
# Return the value with the highest occurrence
mode <- distinct_values[top]
if(is.na(mode)){
top <- distinct_tabulate[distinct_tabulate!=distinct_tabulate[top]] %>% which.max()
mode <- distinct_values[top]
}
return(mode)
}
# Chunk 12: Replace missings
# mutate missing values
columnas_enteras <- zonas[[1]][, unlist(lapply(zonas[[1]], is.integer), use.names = FALSE) ] %>% colnames()
columnas_numericas <- zonas[[1]][, unlist(lapply(zonas[[1]], is.numeric), use.names = FALSE) ] %>% colnames() %>% setdiff(.,columnas_enteras)
columnas_categoricas <- zonas[[1]][, unlist(lapply(zonas[[1]], is.factor), use.names = FALSE) ] %>% colnames()
# reemplazamos variables continuas por la media
for(i in 1:length(zonas)){
zonas[[i]] <- zonas[[i]] %>% mutate_at(columnas_numericas, ~replace_na(.,mean(., na.rm = TRUE)))
}
# reemplazamos variables enteras por la media truncada
for(i in 1:length(zonas)){
zonas[[i]] <- zonas[[i]] %>% mutate_at(columnas_enteras, ~replace_na(.,floor(mean(., na.rm = TRUE))))
}
# reemplazamos variables categóricas por la moda
for(i in 1:length(zonas)){
zonas[[i]] <- zonas[[i]] %>% mutate_at(columnas_categoricas, ~replace_na(.,calc_mode(.)))
}
df_missings <- get_missings()
df_missings %>% View()
# Chunk 14: Transformación de variables categóricas
# Iterar por zonas
dmy <- dummyVars( ~ +Location+RainToday+RainTomorrow, data = zonas[[1]])
trsf <- data.frame(predict(dmy, newdata = zonas[[1]]))
zonas[[1]] <- zonas[[1]] %>% select(., -any_of(c("Location","RainToday","RainTomorrow"))) %>% cbind(.,trsf)
zonas[[1]] %>% head() %>% View()
WindGustDir %>% as.character()
radianes <- list("E"=0,"ENE"=pi/8, "NE"=pi/4, "NNE"=3*pi/8,
"N" = pi/2,"NNW"=5*pi/8,"NW"=3*pi/4,"WNW"=7*pi/8,
"W"=pi,"WSW"=9*pi/8,"SW"=5*pi/4,"SSW"=11*pi/8,
"S"=3*pi/2,"SSE"=13*pi/8,"SE"=7*pi/4,"ESE"=15*pi/8)
zonas[[1]] %>% transform(., WindGustDir=radianes[as.character(zonas[[1]]$WindGustDir)]) %>% head() %>% View()
