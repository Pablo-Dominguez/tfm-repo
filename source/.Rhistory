p <- ps[3]
p
# Chunk 38: Fig-14
p <- ps[4]
p
# Chunk 39: Fig-15
p <- ps[5]
p
# Chunk 40: Fig-16
p <- ps[6]
p
# Chunk 41: Fig-17
p <- ps[7]
p
# Chunk 42: Fig-18
p <- ps[8]
p
# Chunk 43: Fig-19
p <- ps[9]
p
# Chunk 44: Fig-20
p <- ps[10]
p
# Chunk 45: Fig-21
p <- ps[11]
p
# Chunk 46: Fig-22
p <- ps[12]
p
# Chunk 47: Fig-23
p <- ps[13]
p
# Chunk 48
last_dbs <- list()
for(i in 1:length(zonas)){
locations <- grep("^Location.[a-zA-Z0-9]*", colnames(zonas[[i]]), value = TRUE)
columnas_numericas <- zonas[[i]][, unlist(lapply(zonas[[i]], is.numeric), use.names = FALSE) ] %>% colnames()
columnas_numericas <- setdiff(columnas_numericas,locations)
city_indices <- which(colnames(zonas[[i]]) %in% locations)
window_dfs <- list()
for(city_index in city_indices){
db_filtered <- zonas[[i]] %>% filter(if_any(city_index, ~ . == 1)) %>% select(.,-locations)
window_df <- db_filtered %>% tq_mutate(
# tq_mutate args
select     = columnas_numericas,
mutate_fun = rollapply,
# rollapply args
width      = 5,
align      = "right",
FUN        = mean,
# mean args
na.rm      = TRUE,
# tq_mutate args
col_rename = paste0(columnas_numericas,"_mean5"))
for(city in locations){
if(which(colnames(zonas[[i]]) == city)==city_index){
window_df[city] <- rep(1,1271)
} else {
window_df[city] <- rep(0,1271)
}
}
for(new_var in paste0(columnas_numericas,"_mean5")){
new_var_mean <- window_df[[new_var]] %>% mean(.,na.rm=TRUE)
window_df[new_var] <- replace_na(window_df[new_var],new_var_mean)
}
window_dfs[[as.character(city_index)]] <- window_df
}
new_df <- bind_rows(window_dfs) %>% select(.,-Date)
last_dbs[[i]] <- new_df
#print(paste0("Exito ",as.character(i)))
}
sample_cols <- paste0(columnas_numericas,"_mean5") %>% sample(5)
last_dbs[[1]][,sample_cols] %>% head() %>% kbl(., booktabs = T,caption = "Muestra de algunas variables ventana de la zona 1") %>% kable_styling(latex_options = c("striped", "scale_down","hold_position"))
setwd("~/Documents/MUM/TFM/code/source")
library(tidyverse)
library(kableExtra)
library(ggpubr)
library(randomForest)
library(mlbench)
library(caret)
library(FactoMineR)
library(factoextra)
library(mltools)
library(data.table)
library(cowplot)
library(RColorBrewer)
library(viridis)
library(tidyquant)
library (e1071)
library(cvms)
# Importamos los datos para el modelado
#
main_data <- read.csv(file="../db/processed_dbs/data_zona7.csv")
main_data["RainTomorrow"] <- as.factor(main_data$RainTomorrow)
attach(main_data)
## 75% of the sample size
smp_size <- floor(0.75 * nrow(main_data))
#
set.seed(123)
train_ind <- sample(seq_len(nrow(main_data)), size = smp_size)
train <- main_data[train_ind, ]
test <- main_data[-train_ind, ]
train$RainTomorrow %>% table()
test$RainTomorrow %>% table()
start_time <- Sys.time()
print(start_time)
svm_linmod01 <- tune(svm ,RainTomorrow ~ ., data = train, kernel = "linear",
ranges =list(cost=2**seq(from=-2, to=5)),
tunecontrol = tune.control(cross=5))
saveRDS(svm_linmod01,"../models/initial_models/svm_linmod01.Rds")
svm_linmod01 <- readRDS("../models/initial_models/tuned_linmod01.Rds")
print("Modelado inicial con kernel lineal")
end_time <- Sys.time()
print(end_time - start_time)
confusion_svm_linmod01 = confusion_matrix(targets = test[,"RainTomorrow"],
predictions = predict(svm_linmod01$best.model,test),
metrics = list("Accuracy" = TRUE))
p <- plot_confusion_matrix(confusion_svm_linmod01$`Confusion Matrix`[[1]], palette = "Greens") + ggtitle("Plot of svm_linmod01")+theme(plot.title = element_text(size = 12))
p
confusion_svm_linmod01$`Accuracy`[[1]]
start_time <- Sys.time()
print(start_time)
svm_linmod01 <- tune(svm ,RainTomorrow ~ ., data = train, kernel = "linear",
ranges =list(cost=2**seq(from=-2, to=5)),
tunecontrol = tune.control(cross=10))
saveRDS(svm_linmod01,"../models/initial_models/svm_linmod01.Rds")
svm_linmod01 <- readRDS("../models/initial_models/tuned_linmod01.Rds")
print("Modelado inicial con kernel lineal")
end_time <- Sys.time()
print(end_time - start_time)
confusion_svm_linmod01 = confusion_matrix(targets = test[,"RainTomorrow"],
predictions = predict(svm_linmod01$best.model,test),
metrics = list("Accuracy" = TRUE))
p <- plot_confusion_matrix(confusion_svm_linmod01$`Confusion Matrix`[[1]], palette = "Greens") + ggtitle("Plot of svm_linmod01")+theme(plot.title = element_text(size = 12))
confusion_svm_linmod01$`Accuracy`[[1]]
p
start_time <- Sys.time()
print(start_time)
svm_polymod01 <- tune(svm ,RainTomorrow ~ ., data = train, kernel = "polynomial",
ranges =list(cost=2**seq(from=-2, to=5)),
degree = 3,
tunecontrol = tune.control(cross=5))
saveRDS(svm_polymod01,"../models/initial_models/svm_polymod01.Rds")
svm_linmod01 <- readRDS("../models/initial_models/svm_polymod01.Rds")
print("Modelado inicial con kernel polinomial")
end_time <- Sys.time()
print(end_time - start_time)
svm_polymod01 <- readRDS("../models/initial_models/svm_polymod01.Rds")
confusion_svm_polymod01 = confusion_matrix(targets = test[,"RainTomorrow"],
predictions = predict(svm_polymod01$best.model,test),
metrics = list("Accuracy" = TRUE))
p <- plot_confusion_matrix(confusion_svm_polymod01$`Confusion Matrix`[[1]], palette = "Greens") + ggtitle("Plot of svm_polymod01")+theme(plot.title = element_text(size = 12))
confusion_svm_linmod01$`Accuracy`[[1]]
svm_linmod01 <- readRDS("../models/initial_models/tuned_linmod01.Rds")
svm_linmod01 <- readRDS("../models/initial_models/svm_linmod01.Rds")
confusion_svm_linmod01 = confusion_matrix(targets = test[,"RainTomorrow"],
predictions = predict(svm_linmod01$best.model,test),
metrics = list("Accuracy" = TRUE))
p <- plot_confusion_matrix(confusion_svm_linmod01$`Confusion Matrix`[[1]], palette = "Greens") + ggtitle("Plot of svm_linmod01")+theme(plot.title = element_text(size = 12))
confusion_svm_linmod01$`Accuracy`[[1]]
View(confusion_svm_linmod01)
confusion_svm_polymod01 = confusion_matrix(targets = test[,"RainTomorrow"],
predictions = predict(svm_polymod01$best.model,test),
metrics = list("Accuracy" = TRUE))
p <- plot_confusion_matrix(confusion_svm_polymod01$`Confusion Matrix`[[1]], palette = "Greens") + ggtitle("Plot of svm_polymod01")+theme(plot.title = element_text(size = 12))
confusion_svm_polymod01$`Accuracy`[[1]]
confusion_svm_linmod01 = confusion_matrix(targets = test[,"RainTomorrow"],
predictions = predict(svm_linmod01$best.model,test),
metrics = list("Accuracy" = TRUE))
p <- plot_confusion_matrix(confusion_svm_linmod01$`Confusion Matrix`[[1]], palette = "Greens") + ggtitle("Plot of svm_linmod01")+theme(plot.title = element_text(size = 12))
confusion_svm_linmod01$`Accuracy`[[1]]
start_time <- Sys.time()
print(start_time)
svm_radmod01 <- tune(svm ,RainTomorrow ~ ., data = train, kernel = "radial",
ranges =list(cost=2**seq(from=-2, to=5),
gamma=2**seq(from=-2, to=5)),
tunecontrol = tune.control(cross=5))
saveRDS(svm_radmod01,"../models/initial_models/svm_radmod01.Rds")
svm_radmod01 <- readRDS("../models/initial_models/svm_radmod01.Rds")
print("Modelado inicial con kernel polinomial")
end_time <- Sys.time()
print(end_time - start_time)
confusion_svm_radmod01 = confusion_matrix(targets = test[,"RainTomorrow"],
predictions = predict(svm_radmod01$best.model,test),
metrics = list("Accuracy" = TRUE))
p <- plot_confusion_matrix(confusion_svm_radmod01$`Confusion Matrix`[[1]], palette = "Greens") + ggtitle("Plot of svm_radmod01")+theme(plot.title = element_text(size = 12))
confusion_svm_radmod01$`Accuracy`[[1]]
start_time <- Sys.time()
print(start_time)
svm_sigmod01 <- tune(svm ,RainTomorrow ~ ., data = train, kernel = "sigmoid",
ranges =list(cost=2**seq(from=-2, to=5)),
tunecontrol = tune.control(cross=5))
saveRDS(svm_sigmod01,"../models/initial_models/svm_sigmod01.Rds")
svm_sigmod01 <- readRDS("../models/initial_models/svm_sigmod01.Rds")
print("Modelado inicial con kernel polinomial")
end_time <- Sys.time()
print(end_time - start_time)
confusion_svm_sigmod01 = confusion_matrix(targets = test[,"RainTomorrow"],
predictions = predict(svm_sigmod01$best.model,test),
metrics = list("Accuracy" = TRUE))
p <- plot_confusion_matrix(confusion_svm_sigmod01$`Confusion Matrix`[[1]], palette = "Greens") + ggtitle("Plot of svm_sigmod01")+theme(plot.title = element_text(size = 12))
confusion_svm_sigmod01$`Accuracy`[[1]]
knn <- knn(train,test,cl=RainTomorrow,k=13)
library(class)
knn <- knn(train,test,cl=RainTomorrow,k=13)
knn <- knn(train,test,cl=train$RainTomorrow,k=13)
knn_mod01 <- knn(train,test,cl=train$RainTomorrow,k=13)
confusion_knn_mod01 <- table(knn_mod01,test$RainTomorrow)
sum(diag(confusion_knn_mod01))/sum(confusion_knn_mod01)
?knn
training_control <- trainControl(method = "repeatedcv",
summaryFunction = defaultSummary,
classProbs = TRUE,
number = 10,
repeats = 10)
seq(11,85,by = 2)
set.seed(123)
training_control <- trainControl(method = "repeatedcv",
summaryFunction = defaultSummary,
classProbs = TRUE,
number = 10,
repeats = 10)
knn_mod01_cv <- train(train$RainTomorrow ~ .,
data = train,
method = "knn",
trControl = training_control,
metric = "Accuracy",
tuneGrid = data.frame(k = seq(11,25,by = 2)))
set.seed(123)
training_control <- trainControl(method = "repeatedcv",
summaryFunction = defaultSummary,
classProbs = TRUE,
number = 10,
repeats = 10)
knn_mod01_cv <- train(RainTomorrow ~ .,
data = train,
method = "knn",
trControl = training_control,
metric = "Accuracy",
tuneGrid = data.frame(k = seq(11,25,by = 2)))
grid = expand.grid(k = c(3, 9, 12)) #in this case data.frame(k = c(3, 9, 12)) will do
grid
k = seq(11,25,2))
seq(11,25,2)
grid = expand.grid(k = c(seq(11,25,2))) #in this case data.frame(k = c(3, 9, 12)) will do
set.seed(123)
grid = expand.grid(k = c(seq(11,25,2))) #in this case data.frame(k = c(3, 9, 12)) will do
knn_mod01_cv = train(RainTomorrow ~., method= "knn",
data = train,
trControl = trainControl(method = 'cv',
number = 5,
search = "grid"),
tuneGrid = grid)
knn_mod01_cv$results
knn_mod01 <- knn(train,test,cl=train$RainTomorrow,k=13)
confusion_knn_mod01 <- table(knn_mod01,test$RainTomorrow)
knn_mod01 <- knn(train,test,cl=train$RainTomorrow,k=13)
confusion_knn_mod01 <- table(knn_mod01,test$RainTomorrow)
acc <- sum(diag(confusion_knn_mod01))/sum(confusion_knn_mod01)
acc
?knn
set.seed(123)
grid = expand.grid(k = c(seq(3,15,3))) #in this case data.frame(k = c(3, 9, 12)) will do
knn_mod01_cv = train(RainTomorrow ~., method= "knn",
data = train,
trControl = trainControl(method = 'cv',
number = 5,
search = "grid"),
tuneGrid = grid)
knn_mod01_cv$results
knn_mod01_cv$bestTune
knn_mod01_cv$
)
knn_mod01_cv$finalModel$k
confusion_knn_mod01 <- table(knn_mod01_cv$finalModel,test$RainTomorrow)
confusion_knn_mod01_cv = confusion_matrix(targets = test[,"RainTomorrow"],
predictions = predict(knn_mod01_cv$finalModel,test),
metrics = list("Accuracy" = TRUE))
nrow(train)
nrow(test)
ncol(test)
ncol(train)
knn_mod01_cv$finalModel$learn
?train
data(iris)
TrainData <- iris[,1:4]
TrainData
colnames(iris)
iris[,-c(3)]
iris[,-c(1)] %>% colnames()
colnames(iris)
set.seed(123)
grid = expand.grid(k = c(seq(3,15,3)))
n_rt <- which(colnames(train) %in% c("RainTomorrow"))
knn_mod01_cv = train(RainTomorrow ~., method= "knn",
data = train[,-c(n_rt)],
trControl = trainControl(method = 'cv',
number = 5,
search = "grid"),
tuneGrid = grid)
knn_mod01_cv$results
#knn_mod01_cv$finalModel
confusion_knn_mod01_cv = confusion_matrix(targets = test[,"RainTomorrow"],
predictions = predict(knn_mod01_cv$finalModel,test),
metrics = list("Accuracy" = TRUE))
n_rt <- which(colnames(train) %in% c("RainTomorrow"))
knn_mod01 <- knn(train[,-c(n_rt)],test[,-c(n_rt)],cl=train$RainTomorrow,k=13)
confusion_knn_mod01 <- table(knn_mod01,test$RainTomorrow)
acc <- sum(diag(confusion_knn_mod01))/sum(confusion_knn_mod01)
acc
set.seed(123)
grid = expand.grid(k = c(seq(3,15,3)))
knn_mod01_cv = train(RainTomorrow ~., method= "knn",
data = train[,-c(n_rt)],
trControl = trainControl(method = 'cv',
number = 5,
search = "grid"),
tuneGrid = grid)
knn_mod01_cv$results
#knn_mod01_cv$finalModel
table(RainTomorrow=test$RainTomorrowknn_mod01, Predict=predict)
knn_mod01
knn_mod01_cv$results
knn_mod01_cv$metric
knn_mod01_cv$finalModel
knn_mod01_cv$finalModel$k
knn_mod01_cv$finalModel$tuneValue
knn_mod01_cv$finalModel$learn
knn_mod01_cv$finalModel$learn$X %>% View()
knn_mod01_cv$finalModel$learn$y
table(RainTomorrow=test$RainTomorrow, Predict=knn_mod01_cv$finalModel$learn$y)
knn_mod01_cv$finalModel$learn$y %>% length()
test$RainTomorrow %>% length()
knn_mod01_cv$pred
set.seed(123)
grid = expand.grid(k = c(seq(3,15,3)))
knn_mod01_cv = train(RainTomorrow ~., method= "knn",
data = train[,-c(n_rt)],
trControl = trainControl(method = 'cv',
number = 5,
search = "grid"),
tuneGrid = grid)
knn_mod01_cv$results
#knn_mod01_cv$finalModel
knn_mod01_cv$pred
set.seed(123)
grid = expand.grid(k = c(seq(3,15,3)))
knn_mod01_cv = train(RainTomorrow ~., method= "knn",
data = train,
trControl = trainControl(method = 'cv',
number = 5,
search = "grid"),
tuneGrid = grid)
knn_mod01_cv$results
#knn_mod01_cv$finalModel
knn_mod01_cv$pred
knn_mod01_cv$trainingData$.outcome
n_rt <- which(colnames(train) %in% c("RainTomorrow"))
knn_mod01 <- knn(train[,-c(n_rt)],test[,-c(n_rt)],cl=train$RainTomorrow,k=c(13,14))
confusion_knn_mod01 <- table(knn_mod01,test$RainTomorrow)
acc <- sum(diag(confusion_knn_mod01))/sum(confusion_knn_mod01)
knn_mod01_cv$bestTune
knn_mod01_cv$bestTune[[1]]
set.seed(123)
grid = expand.grid(k = c(seq(3,25,3)))
knn_mod01_cv = train(RainTomorrow ~., method= "knn",
data = train,
trControl = trainControl(method = 'cv',
number = 5,
search = "grid"),
tuneGrid = grid)
knn_mod01_cv$results
#knn_mod01_cv$finalModel
set.seed(123)
grid = expand.grid(k = c(seq(3,25,1.5)))
knn_mod01_cv = train(RainTomorrow ~., method= "knn",
data = train,
trControl = trainControl(method = 'cv',
number = 5,
search = "grid"),
tuneGrid = grid)
knn_mod01_cv$results
#knn_mod01_cv$finalModel
set.seed(123)
grid = expand.grid(k = c(seq(3,45,3)))
knn_mod01_cv = train(RainTomorrow ~., method= "knn",
data = train,
trControl = trainControl(method = 'cv',
number = 5,
search = "grid"),
tuneGrid = grid)
knn_mod01_cv$results
#knn_mod01_cv$finalModel
n_rt <- which(colnames(train) %in% c("RainTomorrow"))
knn_mod01 <- knn(train[,-c(n_rt)],test[,-c(n_rt)],cl=train$RainTomorrow,k=knn_mod01_cv$bestTune[[1]])
confusion_knn_mod01 <- table(knn_mod01,test$RainTomorrow)
acc <- sum(diag(confusion_knn_mod01))/sum(confusion_knn_mod01)
acc
knn_mod01_cv$bestTune
knn_mod01_cv$bestTune[[1]]
library(tidyverse)
library(kableExtra)
library(ggpubr)
library(randomForest)
library(mlbench)
library(caret)
library(FactoMineR)
library(factoextra)
library(mltools)
library(data.table)
library(class)
library(cowplot)
library(RColorBrewer)
library(viridis)
library(tidyquant)
library (e1071)
library(tree)
library(cvms)
install.packages("tree")
tree <- rpart(RainTomorrow ~., data = train,cp=0.07444)
library(tree)
tree <- rpart(RainTomorrow ~., data = train,cp=0.07444)
library(tidyverse)
library(kableExtra)
library(ggpubr)
library(randomForest)
library(mlbench)
library(caret)
library(FactoMineR)
library(factoextra)
library(mltools)
library(data.table)
library(rpart)
library(rpart.plot)
library(class)
library(cowplot)
library(RColorBrewer)
library(viridis)
library(tidyquant)
library (e1071)
library(tree)
library(cvms)
tree <- rpart(RainTomorrow ~., data = train,cp=0.07444)
p <- predict(tree, train, type = 'class')
p
levels(test$RainTomorrow)
confusionMatrix(p, train$RainTomorrow, positive="1")
?rpart
tree_mod01 <- rpart(RainTomorrow ~., data = train,cp=0.07444)
confusion_tree_mod01 <- confusionMatrix(p, train$RainTomorrow, positive="1")
confusion_tree_mod01$table
tree_mod01 <- rpart(RainTomorrow ~., data = train,cp=0.07444)
confusion_tree_mod01 <- confusionMatrix(p, train$RainTomorrow, positive="1")
acc <- sum(diag(confusion_tree_mod01$table))/sum(confusion_tree_mod01$table)
acc
tree_mod01 <- rpart(RainTomorrow ~., data = train,cp=0.00444)
confusion_tree_mod01 <- confusionMatrix(p, train$RainTomorrow, positive="1")
acc <- sum(diag(confusion_tree_mod01$table))/sum(confusion_tree_mod01$table)
acc
tree_mod01 <- rpart(RainTomorrow ~., data = train,cp=0.10444)
confusion_tree_mod01 <- confusionMatrix(p, train$RainTomorrow, positive="1")
acc <- sum(diag(confusion_tree_mod01$table))/sum(confusion_tree_mod01$table)
acc
# Load the library
library(randomForest)
iris.rf <- randomForest(RainTomorrow ~ .,
data = train,
importance = TRUE,
proximity = TRUE)
irisPred = predict(iris.rf, newdata=test)
CM = table(irisPred, test$RainTomorrow)
(sum(diag(CM)))/sum(CM)
forest_mod01 <- randomForest(RainTomorrow ~ .,
data = train,
importance = TRUE,
proximity = TRUE)
forest_mod01_pred = predict(forest_mod01, newdata=test)
confusion_forest_mod01 = table(forest_mod01_pred, test$RainTomorrow)
(sum(diag(CM)))/sum(CM)
start_time <- Sys.time()
print(start_time)
forest_mod01 <- randomForest(RainTomorrow ~ .,
data = train,
importance = TRUE,
proximity = TRUE,ntree=50)
forest_mod01_pred = predict(forest_mod01, newdata=test)
confusion_forest_mod01 = table(forest_mod01_pred, test$RainTomorrow)
print((sum(diag(CM)))/sum(CM))
end_time <- Sys.time()
print(end_time - start_time)
start_time <- Sys.time()
print(start_time)
forest_mod01 <- randomForest(RainTomorrow ~ .,
data = train,
importance = TRUE,
proximity = TRUE,ntree=150)
forest_mod01_pred = predict(forest_mod01, newdata=test)
confusion_forest_mod01 = table(forest_mod01_pred, test$RainTomorrow)
print((sum(diag(CM)))/sum(CM))
end_time <- Sys.time()
print(end_time - start_time)
start_time <- Sys.time()
print(start_time)
forest_mod01 <- randomForest(RainTomorrow ~ .,
data = train,
importance = TRUE,
proximity = TRUE,ntree=15)
forest_mod01_pred = predict(forest_mod01, newdata=test)
confusion_forest_mod01 = table(forest_mod01_pred, test$RainTomorrow)
print((sum(diag(CM)))/sum(CM))
end_time <- Sys.time()
print(end_time - start_time)
