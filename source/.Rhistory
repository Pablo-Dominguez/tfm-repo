df_missings01 <- df_missings[,1:8]
df_missings02 <- df_missings[,9:15]
df_missings03 <- df_missings[,16:23]
df_missings01 <- df_missings01 %>% kbl(., booktabs = T, caption = "Porcentaje de valores faltantes por cada zona y variable.") %>% kable_styling(latex_options = c("striped","hold_position","scale_down"))
df_missings02 <- df_missings02 %>% kbl(., booktabs = T) %>% kable_styling(latex_options = c("striped","hold_position","scale_down"))
df_missings03 <- df_missings03 %>% kbl(., booktabs = T) %>% kable_styling(latex_options = c("striped","scale_down","hold_position"))
# Chunk 14
df_missings01
df_missings02
df_missings03
# Chunk 15
for(i in 1:length(zonas)){
zonas[[i]] <- zonas[[i]] %>% select(., -any_of(c("Evaporation", "Sunshine", "Pressure9am", "Pressure3pm", "Cloud9am", "Cloud3pm")))
}
# Chunk 16: función para calcular la moda
calc_mode <- function(x){
# List the distinct / unique values
distinct_values <- unique(x)
# Count the occurrence of each distinct value
distinct_tabulate <- tabulate(match(x, distinct_values))
top <- which.max(distinct_tabulate)
# Return the value with the highest occurrence
mode <- distinct_values[top]
if(is.na(mode)){
top <- distinct_tabulate[distinct_tabulate!=distinct_tabulate[top]] %>% which.max()
mode <- distinct_values[top]
}
return(mode)
}
# Chunk 17: Replace missings
# mutate missing values
#columnas_enteras <- zonas[[1]][, unlist(lapply(zonas[[1]], is.integer), use.names = FALSE) ] %>% colnames()
columnas_numericas <- zonas[[1]][, unlist(lapply(zonas[[1]], is.numeric), use.names = FALSE) ] %>% colnames() #%>% setdiff(.,columnas_enteras)
columnas_categoricas <- zonas[[1]][, unlist(lapply(zonas[[1]], is.factor), use.names = FALSE) ] %>% colnames()
# reemplazamos variables continuas por la media
for(i in 1:length(zonas)){
zonas[[i]] <- zonas[[i]] %>% mutate_at(columnas_numericas, ~replace_na(.,mean(., na.rm = TRUE)))
}
# reemplazamos variables enteras por la media truncada
# for(i in 1:length(zonas)){
#   zonas[[i]] <- zonas[[i]] %>% mutate_at(columnas_enteras, ~replace_na(.,floor(mean(., na.rm = TRUE))))
# }
# reemplazamos variables categóricas por la moda
for(i in 1:length(zonas)){
zonas[[i]] <- zonas[[i]] %>% mutate_at(columnas_categoricas, ~replace_na(.,calc_mode(.)))
}
df_missings <- get_missings()
# df_missings %>% View()
# Chunk 18: Tab-8
t <- sort(sample(1:ncol(df_missings),8))
df_missings01 <- df_missings %>% select(.,all_of(t))
df_missings01 <- df_missings01 %>% kbl(., booktabs = T, caption = "Muestra de variables con valores faltantes imputados.") %>% kable_styling(latex_options = c("striped","hold_position","scale_down"))
df_missings01
# Chunk 19: Get outliers
get_outliers <- function(){
saved_plots <- list.files("../pics/plots/outliers/")
plots_list <- list()
if(length(saved_plots)<8){
for(i in 1:length(zonas)){
ps <- list()
db_temp <- zonas[[i]][,c(columnas_numericas)]
for(colu in db_temp %>% colnames() %>% setdiff(.,"RainTomorrow")){
p <- ggplot(zonas[[i]], aes_string(x="RainTomorrow", y=colu, color="RainTomorrow")) + geom_violin() + geom_boxplot(width=0.25) + stat_boxplot(geom = "errorbar", width = 0.2) + theme(
axis.text.x = element_blank(),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.1, 'cm'),
legend.text = element_text(size=8),
legend.title = element_blank())
ps[[colu]] <- p
}
new_name <- paste0("zona",as.character(i))
plots_list[[new_name]] <- ggarrange(plotlist =  ps, nrow = 4,ncol = 3,common.legend = TRUE)
ggexport(plots_list[new_name],filename = paste0("../pics/plots/outliers/out0",as.character(i),".png"),width = 630, height = 576)
dev.off()
}
return(plots_list)
} else{for(i in 1:length(zonas)){
new_name <- paste0("zona",as.character(i))
p <- ggdraw() +draw_image(paste0("../pics/plots/outliers/out0",as.character(i),".png"))
plots_list[[new_name]] <- p
}
return(plots_list)
}
}
plot_list <- get_outliers()
# Chunk 20: Fig-02
p <- plot_list[names(plot_list)[1]]
p
# Chunk 21: Fig-03
p <- plot_list[names(plot_list)[2]]
p
# Chunk 22: Fig-04
p <- plot_list[names(plot_list)[3]]
p
# Chunk 23: Fig-05
p <- plot_list[names(plot_list)[4]]
p
# Chunk 24: Fig-06
p <- plot_list[names(plot_list)[5]]
p
# Chunk 25: Fig-07
p <- plot_list[names(plot_list)[6]]
p
# Chunk 26: Fig-08
p <- plot_list[names(plot_list)[7]]
p
# Chunk 27: Fig-09
p <- plot_list[names(plot_list)[8]]
p
# Chunk 28: Tab-9
perct_rain_tomorrow <- c()
for(i in 1:length(zonas)){
perct_rain_tomorrow <- c(perct_rain_tomorrow,(table(zonas[[i]]$RainTomorrow)[['Yes']])*100/nrow(zonas[[i]]))
}
prain_df <- data.frame(perct_rain_tomorrow,row.names = c("Zona1", "Zona2", "Zona3", "Zona4", "Zona5", "Zona6", "Zona7", "Zona8"))
prain_df %>% kbl(., booktabs = T, caption = "Índice de lluvia por zona climática") %>%kable_styling(latex_options = c("striped","hold_position"))
# Chunk 29: Transformación de variables categóricas
# Iterar por zonas
for(i in 1:(length(zonas)-1)){
dmy <- dummyVars( ~ +Location, data = zonas[[i]])
trsf <- data.frame(predict(dmy, newdata = zonas[[i]]))
zonas[[i]] <- zonas[[i]] %>% select(., -any_of(c("Location"))) %>% cbind(.,trsf)
zonas[[i]][,c("RainToday","RainTomorrow")] <- lapply(zonas[[i]][,c("RainToday","RainTomorrow")],function(x) as.numeric(x)-1) %>% as.data.frame()
}
zonas[[8]] <- zonas[[8]] %>% select(., -any_of(c("Location")))
zonas[[8]][,c("RainToday","RainTomorrow")] <- lapply(zonas[[8]][,c("RainToday","RainTomorrow")],function(x) as.numeric(x)-1) %>% as.data.frame()
# zonas[[1]] %>% head() %>% View()
# Chunk 30: Fig-10
p <- ggdraw() +draw_image(paste0("../pics/Classification-of-wind-directions.png"))
p
# Chunk 31: Tab-10
radianes <- list("E"=0,"ENE"=pi/8, "NE"=pi/4, "NNE"=3*pi/8,
"N" = pi/2,"NNW"=5*pi/8,"NW"=3*pi/4,"WNW"=7*pi/8,
"W"=pi,"WSW"=9*pi/8,"SW"=5*pi/4,"SSW"=11*pi/8,
"S"=3*pi/2,"SSE"=13*pi/8,"SE"=7*pi/4,"ESE"=15*pi/8)
for(i in 1:length(zonas)){ # transformamos en ángulos
zonas[[i]] <- zonas[[i]] %>% transform(., WindGustDir=radianes[as.character(zonas[[i]]$WindGustDir)])
zonas[[i]]<-zonas[[i]] %>% mutate(., WindGustDir_x=lapply(zonas[[i]]$WindGustDir,cos)) #componente x
zonas[[i]]<-zonas[[i]] %>% mutate(., WindGustDir_y=lapply(zonas[[i]]$WindGustDir,sin)) #componente y
zonas[[i]] <- zonas[[i]] %>% transform(., WindDir9am=radianes[as.character(zonas[[i]]$WindDir9am)])
zonas[[i]] <- zonas[[i]] %>% mutate(., WindDir9am_x=lapply(zonas[[i]]$WindDir9am,cos)) #componente x
zonas[[i]] <- zonas[[i]] %>% mutate(., WindDir9am_y=lapply(zonas[[i]]$WindDir9am,sin)) #componente y
zonas[[i]] <- zonas[[i]] %>% transform(., WindDir3pm=radianes[as.character(zonas[[i]]$WindDir3pm)])
zonas[[i]] <- zonas[[i]] %>% mutate(., WindDir3pm_x=lapply(zonas[[i]]$WindDir3pm,cos)) #componente x
zonas[[i]] <- zonas[[i]] %>% mutate(., WindDir3pm_y=lapply(zonas[[i]]$WindDir3pm,sin)) #componente y
zonas[[i]] <- zonas[[i]] %>% select(., -any_of(c("WindGustDir","WindDir9am","WindDir3pm")))
new_vars <- c("WindGustDir_x","WindGustDir_y","WindDir9am_x","WindDir9am_y","WindDir3pm_x","WindDir3pm_y")
zonas[[i]][,new_vars] <- lapply(zonas[[i]][,new_vars],as.numeric) %>% as.data.frame()
# Las multiplicamos por la intensidad respectiva del viento:
#
zonas[[i]] <- zonas[[i]] %>% rowwise() %>% mutate(., WindGustDir_x=WindGustDir_x * WindGustSpeed)
zonas[[i]] <- zonas[[i]] %>% rowwise() %>% mutate(., WindDir9am_x=WindDir9am_x * WindSpeed9am)
zonas[[i]] <- zonas[[i]] %>% rowwise() %>% mutate(., WindDir3pm_x=WindDir3pm_x * WindSpeed3pm)
zonas[[i]] <- zonas[[i]] %>% rowwise() %>% mutate(., WindGustDir_y=WindGustDir_y * WindGustSpeed)
zonas[[i]] <- zonas[[i]] %>% rowwise() %>% mutate(., WindDir9am_y=WindDir9am_y * WindSpeed9am)
zonas[[i]] <- zonas[[i]] %>% rowwise() %>% mutate(., WindDir3pm_y=WindDir3pm_y * WindSpeed3pm)
zonas[[i]] <- zonas[[i]] %>% select(., -any_of(c("WindGustSpeed","WindSpeed9am","WindSpeed3pm")))
}
zonas[[i]] %>% head() %>% kbl(., booktabs = T, caption = "Conversión de variables de viento") %>% kable_styling(latex_options = c("striped","HOLD_position","scale_down"))
get_ts <- function(){
saved_plots <- list.files("../pics/plots/ts/")
plots_list <- list()
if(length(saved_plots)<8){
for(i in 1:length(zonas)){
ps <- list()
# Seleccionamos las columnas location
locations <- grep("^Location.[a-zA-Z0-9]*", colnames(zonas[[i]]), value = TRUE)
# Creamos la columna Location
col_vec <- c()
for(loc_name in locations){
Location_name <- loc_name %>% strsplit(.,'.',fixed=TRUE)
Location_name <- Location_name[[1]][2]
col_vec <- c(col_vec,rep(Location_name,1271))
}
# Filtramos la serie temporal por el ultimo año, añadimos la columna Location y eliminamos las variables one hot
db_filtered <- zonas[[i]]
db_filtered["Location"] <- col_vec %>% as.factor()
db_filtered <- db_filtered %>% filter(.,Date>= as.Date("2017-01-01"))%>% select(.,-all_of(locations))
## Creamos los plots
# Representamos la serie temporal para la variable MinTemp
# g <- ggplot(Loc_2, aes(x = Date, y = MinTemp)) +
#   geom_line(aes(color = Location), size = 0.2) +
#   scale_color_manual(values = c("#00AFBB", "#E7B800")) +
#   theme(
#           axis.text.x = element_text(size=6),
#           axis.text.y = element_text(size=6),
#           axis.title.x = element_text(size = 8),
#           axis.title.y = element_text(size = 8),
#           legend.key.size = unit(0.5, 'cm'),
#           legend.text = element_text(size=8),
#           legend.title = element_text(face = "bold",size=8),
#           legend.position="top")
# ts variables
ts_cols <- db_filtered %>% colnames() %>% setdiff(.,c("Date","RainToday","RainTomorrow","Location"))
for(colu in ts_cols){
# New plot
p <- ggplot(db_filtered, aes(x = Date, y = colu)) +
geom_line(aes(color = Location), size = 0.2) +
theme(
axis.text.x = element_text(size=6),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.5, 'cm'),
legend.text = element_text(size=8),
legend.title = element_text(face = "bold",size=8),
legend.position="top")
# Old plot
# p <- ggplot(zonas[[i]], aes_string(x="RainTomorrow", y=colu, color="RainTomorrow")) + geom_violin() + geom_boxplot(width=0.25) + stat_boxplot(geom = "errorbar", width = 0.2) + theme(
#   axis.text.x = element_blank(),
#   axis.text.y = element_text(size=6),
#   axis.title.x = element_text(size = 8),
#   axis.title.y = element_text(size = 8),
#   legend.key.size = unit(0.1, 'cm'),
#   legend.text = element_text(size=8),
#   legend.title = element_blank()) # end of plot
ps[[colu]] <- p #añadimos plot a la lista
}
new_name <- paste0("zona",as.character(i))
plots_list[[new_name]] <- ggarrange(plotlist =  ps, nrow = length(ts_cols)/2,ncol = 2,common.legend = TRUE)
ggexport(plots_list[new_name],filename = paste0("../pics/plots/ts/ts0",as.character(i),".png"),width = 723, height = 452)
dev.off()
}
return(plots_list)
} else{for(i in 1:length(zonas)){
new_name <- paste0("zona",as.character(i))
p <- ggdraw() +draw_image(paste0("../pics/plots/ts/ts0",as.character(i),".png"))
plots_list[[new_name]] <- p
}
return(plots_list)
}
}
plot_list <- get_ts()
get_ts <- function(){
saved_plots <- list.files("../pics/plots/ts/")
plots_list <- list()
if(length(saved_plots)<8){
for(i in 1:length(zonas)){
ps <- list()
# Seleccionamos las columnas location
locations <- grep("^Location.[a-zA-Z0-9]*", colnames(zonas[[i]]), value = TRUE)
# Creamos la columna Location
col_vec <- c()
for(loc_name in locations){
Location_name <- loc_name %>% strsplit(.,'.',fixed=TRUE)
Location_name <- Location_name[[1]][2]
col_vec <- c(col_vec,rep(Location_name,1271))
}
# Filtramos la serie temporal por el ultimo año, añadimos la columna Location y eliminamos las variables one hot
db_filtered <- zonas[[i]]
db_filtered["Location"] <- col_vec %>% as.factor()
db_filtered <- db_filtered %>% filter(.,Date>= as.Date("2017-01-01"))%>% select(.,-all_of(locations))
## Creamos los plots
# Representamos la serie temporal para la variable MinTemp
# g <- ggplot(Loc_2, aes(x = Date, y = MinTemp)) +
#   geom_line(aes(color = Location), size = 0.2) +
#   scale_color_manual(values = c("#00AFBB", "#E7B800")) +
#   theme(
#           axis.text.x = element_text(size=6),
#           axis.text.y = element_text(size=6),
#           axis.title.x = element_text(size = 8),
#           axis.title.y = element_text(size = 8),
#           legend.key.size = unit(0.5, 'cm'),
#           legend.text = element_text(size=8),
#           legend.title = element_text(face = "bold",size=8),
#           legend.position="top")
# ts variables
ts_cols <- db_filtered %>% colnames() %>% setdiff(.,c("Date","RainToday","RainTomorrow","Location"))
for(colu in ts_cols){
# New plot
p <- ggplot(db_filtered, aes(x = Date, y = colu)) + geom_line(aes(color = Location), size = 0.2) + theme(
axis.text.x = element_text(size=6),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.25, 'cm'),
legend.text = element_text(size=8),
legend.title = element_text(face = "bold",size=8),
legend.position="top")
# Old plot
# p <- ggplot(zonas[[i]], aes_string(x="RainTomorrow", y=colu, color="RainTomorrow")) + geom_violin() + geom_boxplot(width=0.25) + stat_boxplot(geom = "errorbar", width = 0.2) + theme(
#   axis.text.x = element_blank(),
#   axis.text.y = element_text(size=6),
#   axis.title.x = element_text(size = 8),
#   axis.title.y = element_text(size = 8),
#   legend.key.size = unit(0.1, 'cm'),
#   legend.text = element_text(size=8),
#   legend.title = element_blank()) # end of plot
ps[[colu]] <- p #añadimos plot a la lista
}
new_name <- paste0("zona",as.character(i))
plots_list[[new_name]] <- ggarrange(plotlist =  ps, nrow = length(ts_cols)/2,ncol = 2,common.legend = TRUE)
ggexport(plots_list[new_name],filename = paste0("../pics/plots/ts/ts0",as.character(i),".png"),width = 723, height = 452)
dev.off()
}
return(plots_list)
} else{for(i in 1:length(zonas)){
new_name <- paste0("zona",as.character(i))
p <- ggdraw() +draw_image(paste0("../pics/plots/ts/ts0",as.character(i),".png"))
plots_list[[new_name]] <- p
}
return(plots_list)
}
}
plot_list <- get_ts()
get_ts <- function(){
saved_plots <- list.files("../pics/plots/ts/")
plots_list <- list()
if(length(saved_plots)<8){
for(i in 1:length(zonas)){
ps <- list()
# Seleccionamos las columnas location
locations <- grep("^Location.[a-zA-Z0-9]*", colnames(zonas[[i]]), value = TRUE)
# Creamos la columna Location
col_vec <- c()
for(loc_name in locations){
Location_name <- loc_name %>% strsplit(.,'.',fixed=TRUE)
Location_name <- Location_name[[1]][2]
col_vec <- c(col_vec,rep(Location_name,1271))
}
# Filtramos la serie temporal por el ultimo año, añadimos la columna Location y eliminamos las variables one hot
db_filtered <- zonas[[i]]
db_filtered["Location"] <- col_vec %>% as.factor()
db_filtered <- db_filtered %>% filter(.,Date>= as.Date("2017-01-01"))%>% select(.,-all_of(locations))
## Creamos los plots
# Representamos la serie temporal para la variable MinTemp
# g <- ggplot(Loc_2, aes(x = Date, y = MinTemp)) +
#   geom_line(aes(color = Location), size = 0.2) +
#   scale_color_manual(values = c("#00AFBB", "#E7B800")) +
#   theme(
#           axis.text.x = element_text(size=6),
#           axis.text.y = element_text(size=6),
#           axis.title.x = element_text(size = 8),
#           axis.title.y = element_text(size = 8),
#           legend.key.size = unit(0.5, 'cm'),
#           legend.text = element_text(size=8),
#           legend.title = element_text(face = "bold",size=8),
#           legend.position="top")
# ts variables
ts_cols <- db_filtered %>% colnames() %>% setdiff(.,c("Date","RainToday","RainTomorrow","Location"))
print(paste0("All good for",as.character(i), "before plotting"))
for(colu in ts_cols){
# New plot
p <- ggplot(db_filtered, aes(x = Date, y = colu)) + geom_line(aes(color = Location), size = 0.2) + theme(
axis.text.x = element_text(size=6),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.25, 'cm'),
legend.text = element_text(size=8),
legend.title = element_text(face = "bold",size=8),
legend.position="top")
# Old plot
# p <- ggplot(zonas[[i]], aes_string(x="RainTomorrow", y=colu, color="RainTomorrow")) + geom_violin() + geom_boxplot(width=0.25) + stat_boxplot(geom = "errorbar", width = 0.2) + theme(
#   axis.text.x = element_blank(),
#   axis.text.y = element_text(size=6),
#   axis.title.x = element_text(size = 8),
#   axis.title.y = element_text(size = 8),
#   legend.key.size = unit(0.1, 'cm'),
#   legend.text = element_text(size=8),
#   legend.title = element_blank()) # end of plot
ps[[colu]] <- p #añadimos plot a la lista
}
new_name <- paste0("zona",as.character(i))
plots_list[[new_name]] <- ggarrange(plotlist =  ps, nrow = length(ts_cols)/2,ncol = 2,common.legend = TRUE)
ggexport(plots_list[new_name],filename = paste0("../pics/plots/ts/ts0",as.character(i),".png"),width = 723, height = 452)
dev.off()
}
return(plots_list)
} else{for(i in 1:length(zonas)){
new_name <- paste0("zona",as.character(i))
p <- ggdraw() +draw_image(paste0("../pics/plots/ts/ts0",as.character(i),".png"))
plots_list[[new_name]] <- p
}
return(plots_list)
}
}
plot_list <- get_ts()
i <- 1
ps <- list()
# Seleccionamos las columnas location
locations <- grep("^Location.[a-zA-Z0-9]*", colnames(zonas[[i]]), value = TRUE)
locations
# Creamos la columna Location
col_vec <- c()
for(loc_name in locations){
Location_name <- loc_name %>% strsplit(.,'.',fixed=TRUE)
Location_name <- Location_name[[1]][2]
col_vec <- c(col_vec,rep(Location_name,1271))
}
col_vec %>% table()
# Filtramos la serie temporal por el ultimo año, añadimos la columna Location y eliminamos las variables one hot
db_filtered <- zonas[[i]]
db_filtered["Location"] <- col_vec %>% as.factor()
db_filtered <- db_filtered %>% filter(.,Date>= as.Date("2017-01-01"))%>% select(.,-all_of(locations))
# ts variables
ts_cols <- db_filtered %>% colnames() %>% setdiff(.,c("Date","RainToday","RainTomorrow","Location"))
ts_cols
i <- 1
ps <- list()
# Seleccionamos las columnas location
locations <- grep("^Location.[a-zA-Z0-9]*", colnames(zonas[[i]]), value = TRUE)
# Creamos la columna Location
col_vec <- c()
for(loc_name in locations){
Location_name <- loc_name %>% strsplit(.,'.',fixed=TRUE)
Location_name <- Location_name[[1]][2]
col_vec <- c(col_vec,rep(Location_name,1271))
}
# Filtramos la serie temporal por el ultimo año, añadimos la columna Location y eliminamos las variables one hot
db_filtered <- zonas[[i]]
db_filtered["Location"] <- col_vec %>% as.factor()
db_filtered <- db_filtered %>% filter(.,Date>= as.Date("2017-01-01"))%>% select(.,-all_of(locations))
# ts variables
ts_cols <- db_filtered %>% colnames() %>% setdiff(.,c("Date","RainToday","RainTomorrow","Location"))
for(colu in ts_cols){
# New plot
p <- ggplot(db_filtered, aes(x = Date, y = colu)) + geom_line(aes(color = Location), size = 0.2) + theme(
axis.text.x = element_text(size=6),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.25, 'cm'),
legend.text = element_text(size=8),
legend.title = element_text(face = "bold",size=8),
legend.position="top")
print(paste0("All good for",colu, "when plotting"))
ps[[colu]] <- p #añadimos plot a la lista
}
# new_name <- paste0("zona",as.character(i))
# plots_list[[new_name]] <- ggarrange(plotlist =  ps, nrow = length(ts_cols)/2,ncol = 2,common.legend = TRUE)
# ggexport(plots_list[new_name],filename = paste0("../pics/plots/ts/ts0",as.character(i),".png"),width = 723, height = 452)
# dev.off()
ps[["MinTemp"]]
length(ps)
ps[1]
ps[2]
ps[3]
i <- 1
ps <- list()
# Seleccionamos las columnas location
locations <- grep("^Location.[a-zA-Z0-9]*", colnames(zonas[[i]]), value = TRUE)
# Creamos la columna Location
col_vec <- c()
for(loc_name in locations){
Location_name <- loc_name %>% strsplit(.,'.',fixed=TRUE)
Location_name <- Location_name[[1]][2]
col_vec <- c(col_vec,rep(Location_name,1271))
}
# Filtramos la serie temporal por el ultimo año, añadimos la columna Location y eliminamos las variables one hot
db_filtered <- zonas[[i]]
db_filtered["Location"] <- col_vec %>% as.factor()
db_filtered <- db_filtered %>% filter(.,Date>= as.Date("2017-01-01"))%>% select(.,-all_of(locations))
# ts variables
ts_cols <- db_filtered %>% colnames() %>% setdiff(.,c("Date","RainToday","RainTomorrow","Location"))
for(colu in ts_cols){
# New plot
p <- ggplot(db_filtered, aes_string(x="Date", y=colu, color="Location"))  + theme(
axis.text.x = element_text(size=6),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.25, 'cm'),
legend.text = element_text(size=8),
legend.title = element_text(face = "bold",size=8),
legend.position="top")
print(paste0("All good for",colu, "when plotting"))
ps[[colu]] <- p #añadimos plot a la lista
}
# new_name <- paste0("zona",as.character(i))
# plots_list[[new_name]] <- ggarrange(plotlist =  ps, nrow = length(ts_cols)/2,ncol = 2,common.legend = TRUE)
# ggexport(plots_list[new_name],filename = paste0("../pics/plots/ts/ts0",as.character(i),".png"),width = 723, height = 452)
# dev.off()
ps[1]
i <- 1
ps <- list()
# Seleccionamos las columnas location
locations <- grep("^Location.[a-zA-Z0-9]*", colnames(zonas[[i]]), value = TRUE)
# Creamos la columna Location
col_vec <- c()
for(loc_name in locations){
Location_name <- loc_name %>% strsplit(.,'.',fixed=TRUE)
Location_name <- Location_name[[1]][2]
col_vec <- c(col_vec,rep(Location_name,1271))
}
# Filtramos la serie temporal por el ultimo año, añadimos la columna Location y eliminamos las variables one hot
db_filtered <- zonas[[i]]
db_filtered["Location"] <- col_vec %>% as.factor()
db_filtered <- db_filtered %>% filter(.,Date>= as.Date("2017-01-01"))%>% select(.,-all_of(locations))
# ts variables
ts_cols <- db_filtered %>% colnames() %>% setdiff(.,c("Date","RainToday","RainTomorrow","Location"))
for(colu in ts_cols){
# New plot
p <- ggplot(db_filtered, aes_string(x="Date", y=colu, color="Location")) + geom_line(aes(color = Location), size = 0.2) + theme(
axis.text.x = element_text(size=6),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.25, 'cm'),
legend.text = element_text(size=8),
legend.title = element_text(face = "bold",size=8),
legend.position="top")
print(paste0("All good for",colu, "when plotting"))
ps[[colu]] <- p #añadimos plot a la lista
}
# new_name <- paste0("zona",as.character(i))
# plots_list[[new_name]] <- ggarrange(plotlist =  ps, nrow = length(ts_cols)/2,ncol = 2,common.legend = TRUE)
# ggexport(plots_list[new_name],filename = paste0("../pics/plots/ts/ts0",as.character(i),".png"),width = 723, height = 452)
# dev.off()
ps[1]
