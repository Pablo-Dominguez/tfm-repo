# "zona8")
#df_missings %>% View()
zonas[[i]]%>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))
# counting missing values
df_missings <- NULL;
for(i in 1:length(zonas)){
print(typeof(zonas[[i]]))
row <- zonas[[i]] %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))
#df_missings <- df_missings %>% rbind(.,row)
}
#rownames(df_missings) <- c("zona1",
# "zona2",
# "zona3",
# "zona4",
# "zona5",
# "zona6",
# "zona7",
# "zona8")
#df_missings %>% View()
# counting missing values
df_missings <- NULL;
for(i in 1:length(zonas)){
row <- zonas[[i]] %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))
df_missings <- df_missings %>% rbind(.,row)
}
#rownames(df_missings) <- c("zona1",
# "zona2",
# "zona3",
# "zona4",
# "zona5",
# "zona6",
# "zona7",
# "zona8")
#df_missings %>% View()
# counting missing values
df_missings <- NULL;
for(i in 1:length(zonas)){
row <- zonas[[i]] %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))
df_missings <- df_missings %>% rbind(.,row)
}
#rownames(df_missings) <- c("zona1",
# "zona2",
# "zona3",
# "zona4",
# "zona5",
# "zona6",
# "zona7",
# "zona8")
df_missings %>% View()
# counting missing values
df_missings <- NULL;
for(i in 1:length(zonas)){
row <- zonas[[i]] %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))
df_missings <- df_missings %>% rbind(.,row)
}
rownames(df_missings) <- c("zona1",
"zona2",
"zona3",
"zona4",
"zona5",
"zona6",
"zona7",
"zona8")
df_missings %>% View()
zonas[[i]] %>% mutate_at(vars(everything()), ~replace_na(.,mean(., na.rm = TRUE))) %>% select(everything()) %>% summarise_all(funs(sum(is.na(.)))) %>% View()
zonas[[3]] %>% mutate_at(vars(everything()), ~replace_na(.,mean(., na.rm = TRUE))) %>% select(everything()) %>% summarise_all(funs(sum(is.na(.)))) %>% View()
zonas[[3]] %>% mutate_at(vars(MinTemp,MaxTemp), ~replace_na(.,mean(., na.rm = TRUE))) %>% select(everything()) %>% summarise_all(funs(sum(is.na(.)))) %>% View()
zonas[[3]] %>% mutate_at(vars(colnames(zonas[[3]])), ~replace_na(.,mean(., na.rm = TRUE))) %>% select(everything()) %>% summarise_all(funs(sum(is.na(.)))) %>% View()
zonas[[3]] %>% mutate_at(colnames(zonas[[3]]), ~replace_na(.,mean(., na.rm = TRUE))) %>% select(everything()) %>% summarise_all(funs(sum(is.na(.)))) %>% View()
colnames(zonas[[3]])
db$
,
# counting missing values
df_missings <- NULL;
for(i in 1:length(zonas)){
row <- zonas[[i]] %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))
df_missings <- df_missings %>% rbind(.,row)
}
rownames(df_missings) <- c("zona1",
"zona2",
"zona3",
"zona4",
"zona5",
"zona6",
"zona7",
"zona8")
df_missings %>% View()
zonas[[3]] %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))
zonas[[3]] %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))/100
# counting missing values
df_missings <- NULL;
for(i in 1:length(zonas)){
row <- zonas[[i]] %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))*100 / nrow(zonas[[i]])
df_missings <- df_missings %>% rbind(.,row)
}
rownames(df_missings) <- c("zona1",
"zona2",
"zona3",
"zona4",
"zona5",
"zona6",
"zona7",
"zona8")
df_missings %>% View()
nrow(zonas)
zonas
# counting missing values
df_missings <- NULL;
total_rows <- c()
for(i in 1:length(zonas)){
row <- zonas[[i]] %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))*100 / nrow(zonas[[i]])
total_rows <- c(total_rows,nrow(zonas[[i]]))
df_missings <- df_missings %>% rbind(.,row)
}
df_missings["Total obs"] <- total_rows
rownames(df_missings) <- c("zona1",
"zona2",
"zona3",
"zona4",
"zona5",
"zona6",
"zona7",
"zona8")
df_missings %>% View()
zonas[[8]] %>% head()
zonas[[8]] %>% head() %>% View()
# counting missing values
df_missings <- NULL;
total_rows <- c()
for(i in 1:length(zonas)){
row <- zonas[[i]] %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))*100 / nrow(zonas[[i]])
total_rows <- c(total_rows,nrow(zonas[[i]]))
df_missings <- df_missings %>% rbind(.,row)
}
df_missings["Total obs"] <- total_rows
rownames(df_missings) <- c("zona1",
"zona2",
"zona3",
"zona4",
"zona5",
"zona6",
"zona7",
"zona8")
df_missings %>% View()
for(i in 1:length(zonas)){
zonas[[i]] <- zonas[[i]] %>% select(., -any_of(c(Evaporation, Sunshine, Pressure9am, Pressure3pm, Cloud9am, Cloud3pm)))
}
for(i in 1:length(zonas)){
zonas[[i]] <- zonas[[i]] %>% select(., -any_of(c("Evaporation", "Sunshine", "Pressure9am", "Pressure3pm", "Cloud9am", "Cloud3pm")))
}
# counting missing values
df_missings <- NULL;
total_rows <- c()
for(i in 1:length(zonas)){
row <- zonas[[i]] %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))*100 / nrow(zonas[[i]])
total_rows <- c(total_rows,nrow(zonas[[i]]))
df_missings <- df_missings %>% rbind(.,row)
}
df_missings["Total obs"] <- total_rows
rownames(df_missings) <- c("zona1",
"zona2",
"zona3",
"zona4",
"zona5",
"zona6",
"zona7",
"zona8")
df_missings %>% View()
# Vamos a eliminar todas las variables que tienen el 100% de NA en la zona8, esto es,
# Evaporation, Sunshine, Pressure9am, Pressure3pm, Cloud9am, Cloud3pm, ya que hay indicativos de que esta información ha sido grabada incorrectamente (con un alto número de NAs para todas las zonas climáticas).
?dplyr::coalescence
?coalesce
# mutate missing values
for(i in 1:length(zonas)){
zonas[[i]] %>% mutate_at(vars(Location,Date,MinTemp,MaxTemp,Rainfall, WindGustDir, WindGustSpeed, WindDir9am, WindDir3pm, WindSpeed9am, WindSpeed3pm, Humidity9am, Humidity3pm, Temp9am, Temp3pm, RainToday, RainTomorrow
), ~replace_na(.,mean(., na.rm = TRUE)))
}
# Also use ?dplyr::coalescence
# mutate missing values
for(i in 1:length(zonas)){
zonas[[i]] %>% mutate_at(vars("Location","Date","MinTemp","MaxTemp","Rainfall", "WindGustDir", "WindGustSpeed", "WindDir9am", "WindDir3pm", "WindSpeed9am", "WindSpeed3pm", "Humidity9am", "Humidity3pm", "Temp9am", "Temp3pm", "RainToday", "RainTomorrow"
), ~replace_na(.,mean(., na.rm = TRUE)))
}
# Also use ?dplyr::coalescence
# mutate missing values
for(i in 1:length(zonas)){
zonas[[i]] %>% mutate_at(c("Location","Date","MinTemp","MaxTemp","Rainfall", "WindGustDir", "WindGustSpeed", "WindDir9am", "WindDir3pm", "WindSpeed9am", "WindSpeed3pm", "Humidity9am", "Humidity3pm", "Temp9am", "Temp3pm", "RainToday", "RainTomorrow"
), ~replace_na(.,mean(., na.rm = TRUE)))
}
# Also use ?dplyr::coalescence
# mutate missing values
for(i in 1:length(zonas)){
zonas[[i]] %>% mutate_at(c("Location","Date","MinTemp","MaxTemp","Rainfall", "WindGustDir", "WindGustSpeed", "WindDir9am", "WindDir3pm", "WindSpeed9am", "WindSpeed3pm", "Humidity9am", "Humidity3pm", "Temp9am", "Temp3pm", "RainToday", "RainTomorrow"), ~replace_na(.,mean(., na.rm = TRUE)))
}
# Also use ?dplyr::coalescence
# mutate missing values
for(i in 1:length(zonas)){
zonas[[i]] %>% str()# mutate_at(c("Location","Date","MinTemp","MaxTemp","Rainfall", "WindGustDir", "WindGustSpeed", "WindDir9am", "WindDir3pm", "WindSpeed9am", "WindSpeed3pm", "Humidity9am", "Humidity3pm", "Temp9am", "Temp3pm", "RainToday", "RainTomorrow"), ~replace_na(.,mean(., na.rm = TRUE)))
}
# Also use ?dplyr::coalescence
db %>% head() %>% View()
# counting missing values
df_missings <- NULL;
total_rows <- c()
for(i in 1:length(zonas)){
row <- zonas[[i]] %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))*100 / nrow(zonas[[i]])
total_rows <- c(total_rows,nrow(zonas[[i]]))
df_missings <- df_missings %>% rbind(.,row)
}
df_missings["Total obs"] <- total_rows
rownames(df_missings) <- c("zona1",
"zona2",
"zona3",
"zona4",
"zona5",
"zona6",
"zona7",
"zona8")
df_missings %>% View()
# Vamos a eliminar todas las variables que tienen el 100% de NA en la zona8, esto es,
# Evaporation, Sunshine, Pressure9am, Pressure3pm, Cloud9am, Cloud3pm, ya que hay indicativos de que esta información ha sido grabada incorrectamente (con un alto número de NAs para todas las zonas climáticas).
str(zonas[[2]])
db_zone1 <- db %>% filter(., zona_climatica == 1) %>% select(., -zona_climatica)
db_zone2 <- db %>% filter(., zona_climatica == 2) %>% select(., -zona_climatica)
db_zone3 <- db %>% filter(., zona_climatica == 3) %>% select(., -zona_climatica)
db_zone4 <- db %>% filter(., zona_climatica == 4) %>% select(., -zona_climatica)
db_zone5 <- db %>% filter(., zona_climatica == 5) %>% select(., -zona_climatica)
db_zone6 <- db %>% filter(., zona_climatica == 6) %>% select(., -zona_climatica)
db_zone7 <- db %>% filter(., zona_climatica == 7) %>% select(., -zona_climatica)
db_zone8 <- db %>% filter(., zona_climatica == 8) %>% select(., -zona_climatica)
# Creamos diccionario con los df para poder iterar
zonas <- list("zona1"=db_zone1,
"zona2"=db_zone2,
"zona3"=db_zone3,
"zona4"=db_zone4,
"zona5"=db_zone5,
"zona6"=db_zone6,
"zona7"=db_zone7,
"zona8"=db_zone8)
print(nrow(db) == (nrow(db_zone1) + nrow(db_zone2) + nrow(db_zone3) + nrow(db_zone4) + nrow(db_zone5) + nrow(db_zone6) + nrow(db_zone7) + nrow(db_zone8)))
# counting missing values
df_missings <- NULL;
total_rows <- c()
for(i in 1:length(zonas)){
row <- zonas[[i]] %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))*100 / nrow(zonas[[i]])
total_rows <- c(total_rows,nrow(zonas[[i]]))
df_missings <- df_missings %>% rbind(.,row)
}
df_missings["Total obs"] <- total_rows
rownames(df_missings) <- c("zona1",
"zona2",
"zona3",
"zona4",
"zona5",
"zona6",
"zona7",
"zona8")
df_missings %>% View()
# Vamos a eliminar todas las variables que tienen el 100% de NA en la zona8, esto es,
# Evaporation, Sunshine, Pressure9am, Pressure3pm, Cloud9am, Cloud3pm, ya que hay indicativos de que esta información ha sido grabada incorrectamente (con un alto número de NAs para todas las zonas climáticas).
for(i in 1:length(zonas)){
zonas[[i]] <- zonas[[i]] %>% select(., -any_of(c("Evaporation", "Sunshine", "Pressure9am", "Pressure3pm", "Cloud9am", "Cloud3pm")))
}
# mutate missing values
for(i in 1:length(zonas)){
zonas[[i]] %>% mutate_at(c("MinTemp","MaxTemp","Rainfall", "WindGustSpeed", "WindSpeed9am", "WindSpeed3pm", "Humidity9am", "Humidity3pm", "Temp9am", "Temp3pm"), ~replace_na(.,mean(., na.rm = TRUE)))
}
# Also use ?dplyr::coalescence
str(zonas[[3]])
# mutate missing values
for(i in 1:length(zonas)){
zonas[[i]] %>% mutate_at(c("MinTemp","MaxTemp","Rainfall", "WindGustSpeed", "WindSpeed9am", "WindSpeed3pm", "Humidity9am", "Humidity3pm", "Temp9am", "Temp3pm"), ~replace_na(.,mean(., na.rm = TRUE)))
}
# Also use ?dplyr::coalescence
# mutate missing values
for(i in 1:length(zonas)){
zonas[[i]] %>% mutate_at(c("MinTemp","MaxTemp","Rainfall", "Temp9am", "Temp3pm"), ~replace_na(.,mean(., na.rm = TRUE))) # reemplazamos variables continuas
}
# Also use ?dplyr::coalescence
# counting missing values
df_missings <- NULL;
total_rows <- c()
for(i in 1:length(zonas)){
row <- zonas[[i]] %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))*100 / nrow(zonas[[i]])
total_rows <- c(total_rows,nrow(zonas[[i]]))
df_missings <- df_missings %>% rbind(.,row)
}
df_missings["Total obs"] <- total_rows
rownames(df_missings) <- c("zona1",
"zona2",
"zona3",
"zona4",
"zona5",
"zona6",
"zona7",
"zona8")
df_missings %>% View()
# Vamos a eliminar todas las variables que tienen el 100% de NA en la zona8, esto es,
# Evaporation, Sunshine, Pressure9am, Pressure3pm, Cloud9am, Cloud3pm, ya que hay indicativos de que esta información ha sido grabada incorrectamente (con un alto número de NAs para todas las zonas climáticas).
# mutate missing values
for(i in 1:length(zonas)){
zonas[[i]] <- zonas[[i]] %>% mutate_at(c("MinTemp","MaxTemp","Rainfall", "Temp9am", "Temp3pm"), ~replace_na(.,mean(., na.rm = TRUE))) # reemplazamos variables continuas
}
# Also use ?dplyr::coalescence
# counting missing values
df_missings <- NULL;
total_rows <- c()
for(i in 1:length(zonas)){
row <- zonas[[i]] %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))*100 / nrow(zonas[[i]])
total_rows <- c(total_rows,nrow(zonas[[i]]))
df_missings <- df_missings %>% rbind(.,row)
}
df_missings["Total obs"] <- total_rows
rownames(df_missings) <- c("zona1",
"zona2",
"zona3",
"zona4",
"zona5",
"zona6",
"zona7",
"zona8")
df_missings %>% View()
# Vamos a eliminar todas las variables que tienen el 100% de NA en la zona8, esto es,
# Evaporation, Sunshine, Pressure9am, Pressure3pm, Cloud9am, Cloud3pm, ya que hay indicativos de que esta información ha sido grabada incorrectamente (con un alto número de NAs para todas las zonas climáticas).
str(zonas[[3]])
unlist(lapply(zonas[[2]], is.numeric), use.names = FALSE)
unlist(lapply(zonas[[2]], is.numeric), use.names = TRUE)
unlist(lapply(zonas[[2]], is.numeric), use.names = TRUE)[[1]]
unlist(lapply(zonas[[2]], is.numeric), use.names = TRUE)[,1]
unlist(lapply(zonas[[2]], is.numeric), use.names = TRUE)[1,]
unlist(lapply(zonas[[2]], is.numeric), use.names = TRUE)[1]
columnas_numericas <- db[, unlist(lapply(db, is.numeric), use.names = FALSE) ] %>% colnames()
columnas_numericas
columnas_enteras <- db[, unlist(lapply(db, is.integer), use.names = FALSE) ] %>% colnames()
columnas_enteras
db[, unlist(lapply(db, is.numeric && !is.integer), use.names = FALSE) ] %>% colnames()
db[, unlist(lapply(db, is.numeric && (!is.integer)), use.names = FALSE) ] %>% colnames()
db[, unlist(lapply(db, is.numeric & (!is.integer)), use.names = FALSE) ] %>% colnames()
columnas_numericas <- db[, unlist(lapply(db, is.numeric), use.names = FALSE) ] %>% colnames()
setdiff(columnas_numericas,columnas_enteras)
columnas_enteras <- db[, unlist(lapply(db, is.integer), use.names = FALSE) ] %>% colnames()
columnas_numericas <- db[, unlist(lapply(db, is.numeric), use.names = FALSE) ] %>% colnames() %>% setdiff(.,columnas_enteras)
columnas_categoricas <- db[, unlist(lapply(db, is.factor), use.names = FALSE) ] %>% colnames()
columnas_enteras
columnas_numericas
columnas_categoricas
str(db)
calc_mode <- function(x){
# List the distinct / unique values
distinct_values <- unique(x)
# Count the occurrence of each distinct value
distinct_tabulate <- tabulate(match(x, distinct_values))
# Return the value with the highest occurrence
distinct_values[which.max(distinct_tabulate)]
}
calc_mode(db$Location)
calc_mode(db$WindGustDir)
calc_mode(db$WindGustSpeed)
# counting missing values
df_missings <- NULL;
total_rows <- c()
for(i in 1:length(zonas)){
row <- zonas[[i]] %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))*100 / nrow(zonas[[i]])
total_rows <- c(total_rows,nrow(zonas[[i]]))
df_missings <- df_missings %>% rbind(.,row)
}
df_missings["Total obs"] <- total_rows
rownames(df_missings) <- c("zona1",
"zona2",
"zona3",
"zona4",
"zona5",
"zona6",
"zona7",
"zona8")
df_missings %>% View()
# Vamos a eliminar todas las variables que tienen el 100% de NA en la zona8, esto es,
# Evaporation, Sunshine, Pressure9am, Pressure3pm, Cloud9am, Cloud3pm, ya que hay indicativos de que esta información ha sido grabada incorrectamente (con un alto número de NAs para todas las zonas climáticas).
for(i in 1:length(zonas)){
zonas[[i]] <- zonas[[i]] %>% select(., -any_of(c("Evaporation", "Sunshine", "Pressure9am", "Pressure3pm", "Cloud9am", "Cloud3pm")))
}
calc_mode <- function(x){
# List the distinct / unique values
distinct_values <- unique(x)
# Count the occurrence of each distinct value
distinct_tabulate <- tabulate(match(x, distinct_values))
# Return the value with the highest occurrence
distinct_values[which.max(distinct_tabulate)]
}
# mutate missing values
columnas_enteras <- db[, unlist(lapply(db, is.integer), use.names = FALSE) ] %>% colnames()
columnas_numericas <- db[, unlist(lapply(db, is.numeric), use.names = FALSE) ] %>% colnames() %>% setdiff(.,columnas_enteras)
columnas_categoricas <- db[, unlist(lapply(db, is.factor), use.names = FALSE) ] %>% colnames()
# reemplazamos variables continuas por la media
for(i in 1:length(zonas)){
zonas[[i]] <- zonas[[i]] %>% mutate_at(columnas_numericas, ~replace_na(.,mean(., na.rm = TRUE)))
}
# reemplazamos variables enteras por la media truncada
for(i in 1:length(zonas)){
zonas[[i]] <- zonas[[i]] %>% mutate_at(columnas_enteras, ~replace_na(.,floor(mean(., na.rm = TRUE))))
}
# reemplazamos variables categóricas por la moda
for(i in 1:length(zonas)){
zonas[[i]] <- zonas[[i]] %>% mutate_at(columnas_categoricas, ~replace_na(.,calc_mode(.)))
}
# Also use ?dplyr::coalescence
# counting missing values
df_missings <- NULL;
total_rows <- c()
for(i in 1:length(zonas)){
row <- zonas[[i]] %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))*100 / nrow(zonas[[i]])
total_rows <- c(total_rows,nrow(zonas[[i]]))
df_missings <- df_missings %>% rbind(.,row)
}
df_missings["Total obs"] <- total_rows
rownames(df_missings) <- c("zona1",
"zona2",
"zona3",
"zona4",
"zona5",
"zona6",
"zona7",
"zona8")
df_missings %>% View()
# Vamos a eliminar todas las variables que tienen el 100% de NA en la zona8, esto es,
# Evaporation, Sunshine, Pressure9am, Pressure3pm, Cloud9am, Cloud3pm, ya que hay indicativos de que esta información ha sido grabada incorrectamente (con un alto número de NAs para todas las zonas climáticas).
db_zone1 <- db %>% filter(., zona_climatica == 1) %>% select(., -zona_climatica)
db_zone2 <- db %>% filter(., zona_climatica == 2) %>% select(., -zona_climatica)
db_zone3 <- db %>% filter(., zona_climatica == 3) %>% select(., -zona_climatica)
db_zone4 <- db %>% filter(., zona_climatica == 4) %>% select(., -zona_climatica)
db_zone5 <- db %>% filter(., zona_climatica == 5) %>% select(., -zona_climatica)
db_zone6 <- db %>% filter(., zona_climatica == 6) %>% select(., -zona_climatica)
db_zone7 <- db %>% filter(., zona_climatica == 7) %>% select(., -zona_climatica)
db_zone8 <- db %>% filter(., zona_climatica == 8) %>% select(., -zona_climatica)
# Creamos diccionario con los df para poder iterar
zonas <- list("zona1"=db_zone1,
"zona2"=db_zone2,
"zona3"=db_zone3,
"zona4"=db_zone4,
"zona5"=db_zone5,
"zona6"=db_zone6,
"zona7"=db_zone7,
"zona8"=db_zone8)
print(nrow(db) == (nrow(db_zone1) + nrow(db_zone2) + nrow(db_zone3) + nrow(db_zone4) + nrow(db_zone5) + nrow(db_zone6) + nrow(db_zone7) + nrow(db_zone8)))
# counting missing values
df_missings <- NULL;
total_rows <- c()
for(i in 1:length(zonas)){
row <- zonas[[i]] %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))*100 / nrow(zonas[[i]])
total_rows <- c(total_rows,nrow(zonas[[i]]))
df_missings <- df_missings %>% rbind(.,row)
}
df_missings["Total obs"] <- total_rows
rownames(df_missings) <- c("zona1",
"zona2",
"zona3",
"zona4",
"zona5",
"zona6",
"zona7",
"zona8")
df_missings %>% View()
# Vamos a eliminar todas las variables que tienen el 100% de NA en la zona8, esto es,
# Evaporation, Sunshine, Pressure9am, Pressure3pm, Cloud9am, Cloud3pm, ya que hay indicativos de que esta información ha sido grabada incorrectamente (con un alto número de NAs para todas las zonas climáticas).
for(i in 1:length(zonas)){
zonas[[i]] <- zonas[[i]] %>% select(., -any_of(c("Evaporation", "Sunshine", "Pressure9am", "Pressure3pm", "Cloud9am", "Cloud3pm")))
}
calc_mode <- function(x){
# List the distinct / unique values
distinct_values <- unique(x)
# Count the occurrence of each distinct value
distinct_tabulate <- tabulate(match(x, distinct_values))
# Return the value with the highest occurrence
distinct_values[which.max(distinct_tabulate)]
}
# mutate missing values
columnas_enteras <- zonas[[1]][, unlist(lapply(zonas[[1]], is.integer), use.names = FALSE) ] %>% colnames()
columnas_numericas <- zonas[[1]][, unlist(lapply(zonas[[1]], is.numeric), use.names = FALSE) ] %>% colnames() %>% setdiff(.,columnas_enteras)
columnas_categoricas <- zonas[[1]][, unlist(lapply(zonas[[1]], is.factor), use.names = FALSE) ] %>% colnames()
# reemplazamos variables continuas por la media
for(i in 1:length(zonas)){
zonas[[i]] <- zonas[[i]] %>% mutate_at(columnas_numericas, ~replace_na(.,mean(., na.rm = TRUE)))
}
# reemplazamos variables enteras por la media truncada
for(i in 1:length(zonas)){
zonas[[i]] <- zonas[[i]] %>% mutate_at(columnas_enteras, ~replace_na(.,floor(mean(., na.rm = TRUE))))
}
# reemplazamos variables categóricas por la moda
for(i in 1:length(zonas)){
zonas[[i]] <- zonas[[i]] %>% mutate_at(columnas_categoricas, ~replace_na(.,calc_mode(.)))
}
# Also use ?dplyr::coalescence
# counting missing values
df_missings <- NULL;
total_rows <- c()
for(i in 1:length(zonas)){
row <- zonas[[i]] %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))*100 / nrow(zonas[[i]])
total_rows <- c(total_rows,nrow(zonas[[i]]))
df_missings <- df_missings %>% rbind(.,row)
}
df_missings["Total obs"] <- total_rows
rownames(df_missings) <- c("zona1",
"zona2",
"zona3",
"zona4",
"zona5",
"zona6",
"zona7",
"zona8")
df_missings %>% View()
# Vamos a eliminar todas las variables que tienen el 100% de NA en la zona8, esto es,
# Evaporation, Sunshine, Pressure9am, Pressure3pm, Cloud9am, Cloud3pm, ya que hay indicativos de que esta información ha sido grabada incorrectamente (con un alto número de NAs para todas las zonas climáticas).
