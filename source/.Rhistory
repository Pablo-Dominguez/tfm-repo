# Evaluamos los tipos de dato.
db_types <- sapply(db,class) %>% as.data.frame()
colnames(db_types) <- c("Data_types")
db_types01 <- db_types %>% slice(., 1:floor(nrow(db_types)/2))
db_types02 <- db_types %>% slice(., ceiling(nrow(db_types)/2):nrow(db_types))
kbl_types01 <- db_types01 %>% kbl(., booktabs = T, caption = "Tipos de las once primeras variables") %>% kable_styling(latex_options = c("striped","HOLD_position")
)
kbl_types02 <- db_types02 %>% kbl(., booktabs = T, caption = "Tipos de las doce variables restantes") %>% kable_styling(latex_options = c("striped","HOLD_position"))
#knitr::kables(list(db_types01 %>% kable(., booktabs = T,caption = "Left") %>% kable_styling(latex_options = c("striped","HOLD_position"), position="float_left"),
#                   db_types02 %>% kable(., booktabs = T,caption = "Right") %>% kable_styling(latex_options = c("striped","HOLD_position"),position="float_right"),caption = "Tipo de datos de las variables")) %>% kable_styling(latex_options = c("striped","HOLD_position"))
# Chunk 4
kbl_types01 <- gsub("\\begin{table}[H]", "\\begin{subtable}[b]{0.48\\linewidth}\n\n", kbl_types01, fixed = TRUE)
kbl_types01 <- gsub("\\end{table}", "\\end{subtable}", kbl_types01, fixed = TRUE)
kbl_types02 <- gsub("\\begin{table}[H]", "\\begin{subtable}[b]{0.48\\linewidth}\n", kbl_types02, fixed = TRUE)
kbl_types02 <- gsub("\\end{table}", "\\end{subtable}", kbl_types02, fixed = TRUE)
# Chunk 5: Tab-2
cat("",
"\\begin{table}[!htb]",
"\\centering",
"\\caption{Tipo de datos de las variables}",
kbl_types01,
kbl_types02,
"\\label{tab:Tab-2}",
"\\end{table}",
"",
sep = "\n")
# Chunk 6: Tab-3
# Creamos función que comprueba rango de fechas
err_cities <- c()
date_range <- function(){
# Inicializamos los vectores
min_fec <- c()
max_fec <- c()
obs <- c()
rep <- c()
n_diff_dates_vec <- c()
top_diff_date_vec <- c()
range_free_vec <- c()
# Iteramos por cada ciudad
for(city in levels(db$Location)){
# Filtramos el ds por ciudad
db_filtered <- db %>% filter(.,Location==city)
# Calculamos y almacenamos el mínimo y el máximo de la variable Date
mind <- format(as.Date(min(db_filtered$Date),format="%Y-%m-%d"))
min_fec <- c(min_fec,mind)
maxd <- format(as.Date(max(db_filtered$Date),format="%Y-%m-%d"))
max_fec <- c(max_fec,maxd)
# Comprobamos rangos de fecha
fech_range <- seq(mind %>% as.Date(), maxd %>% as.Date(), "days")
diff_dates <- setdiff(fech_range,db_filtered$Date) %>% as.Date(., origin="1970-01-01")
if(length(diff_dates)>0){ # hay fechas faltantes
top_diff_date <- max(diff_dates) %>% as.Date(., origin="1970-01-01")
top_diff_date_vec <- c(top_diff_date_vec,top_diff_date)
n_diff_dates <- length(diff_dates)
n_diff_dates_vec <- c(n_diff_dates_vec,n_diff_dates)
range_free <- seq(top_diff_date %>% as.Date(),maxd %>% as.Date(), "days") %>% length()
range_free_vec <- c(range_free_vec,range_free)
} else {
top_diff_date_vec <- c(top_diff_date_vec,NA)
n_diff_dates_vec <- c(n_diff_dates_vec,0)
range_free_vec <- c(range_free_vec,NA)
}
obs <- c(obs,length(db_filtered$Date))
rep <- c(rep,length(unique(db_filtered$Date))!=length(db_filtered$Date))
}
dates_df <- data.frame(min_fec,max_fec,obs,rep,n_diff_dates_vec,top_diff_date_vec,range_free_vec, stringsAsFactors=TRUE)
dates_df$min_fec <- as.Date(dates_df$min_fec, format="%Y-%m-%d")
dates_df$max_fec <- as.Date(dates_df$max_fec, format="%Y-%m-%d")
dates_df <- mutate(dates_df, range = max_fec - min_fec+1)
dates_df$top_diff_date_vec <- dates_df$top_diff_date_vec %>% as.Date(., origin="1970-01-01")
rownames(dates_df) <- levels(db$Location)
dates_df <- dates_df %>% rename(n_diff_dates=n_diff_dates_vec, top_diff_date=top_diff_date_vec, range_free = range_free_vec)
return(dates_df)
}
dates_df <- date_range()
df_dates01 <- dates_df[1:7,]
df_dates02 <- dates_df[8:14,]
df_dates03 <- dates_df[15:21,]
df_dates04 <- dates_df[22:28,]
df_dates05 <- dates_df[29:35,]
df_dates06 <- dates_df[36:42,]
df_dates07 <- dates_df[43:49,]
df_dates01 <- df_dates01 %>% kbl(., booktabs = T , align = "c", caption = "Continuidad de las series temporales") %>% kable_styling(latex_options = c("striped","HOLD_position","scale_down"))
df_dates02 <- df_dates02 %>% kbl(., booktabs = T,col.names = NULL,align = "c") %>% kable_styling(latex_options = c("striped","HOLD_position","scale_down"))
df_dates03 <- df_dates03 %>% kbl(., booktabs = T,col.names = NULL,align = "c") %>% kable_styling(latex_options = c("striped","HOLD_position","scale_down"))
df_dates04 <- df_dates04 %>% kbl(., booktabs = T,col.names = NULL,align = "c") %>% kable_styling(latex_options = c("striped","HOLD_position","scale_down"))
df_dates05 <- df_dates05 %>% kbl(., booktabs = T,col.names = NULL,align = "c") %>% kable_styling(latex_options = c("striped","HOLD_position","scale_down"))
df_dates06 <- df_dates06 %>% kbl(., booktabs = T,col.names = NULL,align = "c") %>% kable_styling(latex_options = c("striped","HOLD_position","scale_down"))
df_dates07 <- df_dates07 %>% kbl(., booktabs = T,col.names = NULL,align = "c") %>% kable_styling(latex_options = c("striped","HOLD_position","scale_down"))
#dates_df %>% kbl(., booktabs = T , caption = "Continuidad de las series temporales") %>% kable_styling(latex_options = c("striped","HOLD_position","scale_down"), repeat_header_continued=T)
# Chunk 7
df_dates01
df_dates02
df_dates03
df_dates04
df_dates05
df_dates06
df_dates07
# Chunk 8: Tab-4
# Rango de a 2013-12-31 y menor a 2017-06-24
db <- db %>% filter(.,Date>as.Date("2013-12-31") & Date<=as.Date("2017-06-24"))
# Comprobamos datos limpios
dates_df <- date_range()
dates_df %>% slice(., 1:12) %>% kbl(., booktabs = T, caption = "Muestra de series temporales desde el 2014-01-01 hasta el 2017-06-24") %>% kable_styling(latex_options = c("striped","HOLD_position","scale_down"))
# Chunk 9: Fig-01
url <- "../pics/PD_Design_Climate_2.png"
knitr::include_graphics(url)
# Mapa de las zonas climáticas de Australia  - \\newline{} \\footnotesize{Fuente: Australian Building Codes Board}
# Chunk 10: Agrupamos por zonas climáticas
# Creamos vectores de zonas climáticas
zona1 <- c("Exmouth", "Dampier", "PortHedland", "Broome", "Derby", "Wyndham", "TimberCreek", "Katherine","Darwin", "Oenpelli", "Borroloola", "Nhulunbuy","Burketown", "Weipa", "Cooktown", "Cairns", "Townsville")
zona2 <- c("Mackay", "Rockhampton", "Maryborough", "Brisbane", "CoffsHarbour","GoldCoast")
zona3 <- c("Goondiwindi", "Taroom","Charleville", "Longreach","Thargomindah","Birdsville","MountIsa","AliceSprings","Kulgera","Yulara","Telfer","Newman", "GascoyneJunction","Carnavon","Uluru")
zona4 <- c("Woomera","Yalgoo", "Wiluna", "KalgoorlieBoulder", "Norseman", "Merredin","Newdegate","Warburton", "Amata","Oodnadatta","CooberPedy", "Nullarbor", "Innamincka","Whyalla","BrokenHill","Tibooburra","Bourke","Ivanhoe","Mildura","Griffith","Albury","WaggaWagga","Wodonga","Dubbo","Tamworth","Shepparton","Cobar","Moree","Nhil")
zona5 <- c("Geraldton","Perth","Witchcliffe","Bunbury","MargaretRiver","Esperance","Eucla","Ceduna","PortLincoln","Adelaide","LeighCreek","Renmark","Wollongong","Sydney","SydneyAirport","Newcastle","PortMacquaire","NorahHead","PearceRAAF","Penrith","PerthAirport")
zona6 <- c("Albany","Burra","Kingscote","KingstonSE","MountGambier","Horsham","Watsonia","Melbourne","LakesEntrance","BadgerysCreek","Bendigo","Dartmoor","MelbourneAirport","Nuriootpa","Sale","SalmonGums")
zona7 <- c("Ballarat","Canberra","Bathurst","Devonport","Strahan","Launceston","Swansea","Hobart","Southport","Tuggeranong")
zona8 <- c("MountGinini")
zonas <- c(zona1,zona2,zona3,zona4,zona5,zona6,zona7,zona8)
zona_climatica <- c()
# Asignamos cada ciudad a una zona climática
for(city in levels(db$Location)){
if(city %in% zona1){
zona_climatica <- c(zona_climatica,1)
}
else if(city %in% zona2){
zona_climatica <- c(zona_climatica,2)
}
else if(city %in% zona3){
zona_climatica <- c(zona_climatica,3)
}
else if(city %in% zona4){
zona_climatica <- c(zona_climatica,4)
}
else if(city %in% zona5){
zona_climatica <- c(zona_climatica,5)
}
else if(city %in% zona6){
zona_climatica <- c(zona_climatica,6)
}
else if(city %in% zona7){
zona_climatica <- c(zona_climatica,7)
}
else if(city %in% zona8){
zona_climatica <- c(zona_climatica,8)
}
else { # Los lugares sin zona climática le asignamos el 0, para luego eliminar estas observaciones
zona_climatica <- c(zona_climatica,0)
}
}
# Creamos dataframe de zonas climáticas
zonas_climaticas <- data.frame(levels(db$Location),zona_climatica) %>% rename(Location=levels.db.Location.)
#zonas_climaticas %>% View()
# Chunk 11: Tab-5
# Añadimos las zonas climáticas
db <- left_join(zonas_climaticas,db, by="Location",strings)
db$Location <- db$Location %>% as.factor()
# Eliminamos la zona climática 0
db <- db %>% filter(., zona_climatica != 0)
db <- droplevels(db)
#db$zona_climatica <- db$zona_climatica %>% as.factor()
# Contamos valores totales por zona climática:
#db %>% count(zona_climatica,name = "n_obs") %>% View()
# Contamos cantidad de ciudades por zona climática
#db %>% count(zona_climatica,Location) %>%count(zona_climatica,name="n_locations") %>%  View()
# Comprobamos datos continuos
# db %>% count(zona_climatica,Location) %>% View() # esto confirma que tenemos 1272 datos para cada ciudad
# Todo a la vez:
climate_zones_db <- db %>% count(zona_climatica,name = "n_obs") %>% left_join(.,db %>% count(zona_climatica,Location) %>%count(zona_climatica,name="n_locations"), by="zona_climatica",strings) %>% select(.,-c(zona_climatica))
rownames(climate_zones_db) <- c("Zona 1", "Zona 2", "Zona 3", "Zona 4", "Zona 5", "Zona 6","Zona 7","Zona 8")
climate_zones_db %>% kbl(., booktabs = T,caption = "Cantidad de observaciones y localizaciones por zona climática") %>% kable_styling(latex_options = c("striped","hold_position"))
# Chunk 12
db_zone1 <- db %>% filter(., zona_climatica == 1) %>% select(., -zona_climatica)
db_zone1 <- droplevels(db_zone1)
db_zone2 <- db %>% filter(., zona_climatica == 2) %>% select(., -zona_climatica)
db_zone2 <- droplevels(db_zone2)
db_zone3 <- db %>% filter(., zona_climatica == 3) %>% select(., -zona_climatica)
db_zone3 <- droplevels(db_zone3)
db_zone4 <- db %>% filter(., zona_climatica == 4) %>% select(., -zona_climatica)
db_zone4 <- droplevels(db_zone4)
db_zone5 <- db %>% filter(., zona_climatica == 5) %>% select(., -zona_climatica)
db_zone5 <- droplevels(db_zone5)
db_zone6 <- db %>% filter(., zona_climatica == 6) %>% select(., -zona_climatica)
db_zone6 <- droplevels(db_zone6)
db_zone7 <- db %>% filter(., zona_climatica == 7) %>% select(., -zona_climatica)
db_zone7 <- droplevels(db_zone7)
db_zone8 <- db %>% filter(., zona_climatica == 8) %>% select(., -zona_climatica)
db_zone8 <- droplevels(db_zone8)
# Creamos diccionario con los df para poder iterar
zonas <- list("zona1"=db_zone1,
"zona2"=db_zone2,
"zona3"=db_zone3,
"zona4"=db_zone4,
"zona5"=db_zone5,
"zona6"=db_zone6,
"zona7"=db_zone7,
"zona8"=db_zone8)
#print(nrow(db) == (nrow(db_zone1) + nrow(db_zone2) + nrow(db_zone3) + nrow(db_zone4) + nrow(db_zone5) + nrow(db_zone6) + nrow(db_zone7) + nrow(db_zone8)))
# Chunk 13: Tab-6
# Crear función de comprobar missings
# counting missing values
get_missings <- function(){
df_missings <- NULL;
for(i in 1:length(zonas)){
row <- zonas[[i]] %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))*100 / nrow(zonas[[i]])
df_missings <- df_missings %>% rbind(.,row)
}
rownames(df_missings) <- c("zona1",
"zona2",
"zona3",
"zona4",
"zona5",
"zona6",
"zona7",
"zona8")
return(df_missings)
}
df_missings <- get_missings()
# df_missings %>% View()
#
df_missings01 <- df_missings[,1:8]
df_missings02 <- df_missings[,9:15]
df_missings03 <- df_missings[,16:23]
df_missings01 <- df_missings01 %>% kbl(., booktabs = T, caption = "Porcentaje de valores faltantes por cada zona y variable.") %>% kable_styling(latex_options = c("striped","hold_position","scale_down"))
df_missings02 <- df_missings02 %>% kbl(., booktabs = T) %>% kable_styling(latex_options = c("striped","hold_position","scale_down"))
df_missings03 <- df_missings03 %>% kbl(., booktabs = T) %>% kable_styling(latex_options = c("striped","scale_down","hold_position"))
# Chunk 14
df_missings01
df_missings02
df_missings03
# Chunk 15
for(i in 1:length(zonas)){
zonas[[i]] <- zonas[[i]] %>% select(., -any_of(c("Evaporation", "Sunshine", "Pressure9am", "Pressure3pm", "Cloud9am", "Cloud3pm")))
}
# Chunk 16: función para calcular la moda
calc_mode <- function(x){
# List the distinct / unique values
distinct_values <- unique(x)
# Count the occurrence of each distinct value
distinct_tabulate <- tabulate(match(x, distinct_values))
top <- which.max(distinct_tabulate)
# Return the value with the highest occurrence
mode <- distinct_values[top]
if(is.na(mode)){
top <- distinct_tabulate[distinct_tabulate!=distinct_tabulate[top]] %>% which.max()
mode <- distinct_values[top]
}
return(mode)
}
# Chunk 17: Replace missings
# mutate missing values
#columnas_enteras <- zonas[[1]][, unlist(lapply(zonas[[1]], is.integer), use.names = FALSE) ] %>% colnames()
columnas_numericas <- zonas[[1]][, unlist(lapply(zonas[[1]], is.numeric), use.names = FALSE) ] %>% colnames() #%>% setdiff(.,columnas_enteras)
columnas_categoricas <- zonas[[1]][, unlist(lapply(zonas[[1]], is.factor), use.names = FALSE) ] %>% colnames()
# reemplazamos variables continuas por la media
for(i in 1:length(zonas)){
zonas[[i]] <- zonas[[i]] %>% mutate_at(columnas_numericas, ~replace_na(.,mean(., na.rm = TRUE)))
}
# reemplazamos variables enteras por la media truncada
# for(i in 1:length(zonas)){
#   zonas[[i]] <- zonas[[i]] %>% mutate_at(columnas_enteras, ~replace_na(.,floor(mean(., na.rm = TRUE))))
# }
# reemplazamos variables categóricas por la moda
for(i in 1:length(zonas)){
zonas[[i]] <- zonas[[i]] %>% mutate_at(columnas_categoricas, ~replace_na(.,calc_mode(.)))
}
df_missings <- get_missings()
# df_missings %>% View()
# Chunk 18: Tab-8
t <- sort(sample(1:ncol(df_missings),8))
df_missings01 <- df_missings %>% select(.,all_of(t))
df_missings01 <- df_missings01 %>% kbl(., booktabs = T, caption = "Muestra de variables con valores faltantes imputados.") %>% kable_styling(latex_options = c("striped","hold_position","scale_down"))
df_missings01
# Chunk 19: Get outliers
get_outliers <- function(){
saved_plots <- list.files("../pics/plots/outliers/")
plots_list <- list()
if(length(saved_plots)<8){
for(i in 1:length(zonas)){
ps <- list()
db_temp <- zonas[[i]][,c(columnas_numericas)]
for(colu in db_temp %>% colnames() %>% setdiff(.,"RainTomorrow")){
p <- ggplot(zonas[[i]], aes_string(x="RainTomorrow", y=colu, color="RainTomorrow")) + geom_violin() + geom_boxplot(width=0.25) + stat_boxplot(geom = "errorbar", width = 0.2) + theme(
axis.text.x = element_blank(),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.1, 'cm'),
legend.text = element_text(size=8),
legend.title = element_blank())
ps[[colu]] <- p
}
new_name <- paste0("zona",as.character(i))
plots_list[[new_name]] <- ggarrange(plotlist =  ps, nrow = 4,ncol = 3,common.legend = TRUE)
ggexport(plots_list[new_name],filename = paste0("../pics/plots/outliers/out0",as.character(i),".png"),width = 630, height = 576)
dev.off()
}
return(plots_list)
} else{for(i in 1:length(zonas)){
new_name <- paste0("zona",as.character(i))
p <- ggdraw() +draw_image(paste0("../pics/plots/outliers/out0",as.character(i),".png"))
plots_list[[new_name]] <- p
}
return(plots_list)
}
}
plot_list <- get_outliers()
# Chunk 20: Fig-02
p <- plot_list[names(plot_list)[1]]
p
# Chunk 21: Fig-03
p <- plot_list[names(plot_list)[2]]
p
# Chunk 22: Fig-04
p <- plot_list[names(plot_list)[3]]
p
# Chunk 23: Fig-05
p <- plot_list[names(plot_list)[4]]
p
# Chunk 24: Fig-06
p <- plot_list[names(plot_list)[5]]
p
# Chunk 25: Fig-07
p <- plot_list[names(plot_list)[6]]
p
# Chunk 26: Fig-08
p <- plot_list[names(plot_list)[7]]
p
# Chunk 27: Fig-09
p <- plot_list[names(plot_list)[8]]
p
# Chunk 28: Tab-9
perct_rain_tomorrow <- c()
for(i in 1:length(zonas)){
perct_rain_tomorrow <- c(perct_rain_tomorrow,(table(zonas[[i]]$RainTomorrow)[['Yes']])*100/nrow(zonas[[i]]))
}
prain_df <- data.frame(perct_rain_tomorrow,row.names = c("Zona1", "Zona2", "Zona3", "Zona4", "Zona5", "Zona6", "Zona7", "Zona8"))
prain_df %>% kbl(., booktabs = T, caption = "Índice de lluvia por zona climática") %>%kable_styling(latex_options = c("striped","hold_position"))
# Chunk 29: Transformación de variables categóricas
# Iterar por zonas
for(i in 1:(length(zonas))){
dmy <- dummyVars( ~ +Location, data = zonas[[i]])
if(i<8){
trsf <- data.frame(predict(dmy, newdata = zonas[[i]]))
zonas[[i]] <- zonas[[i]] %>% select(., -any_of(c("Location"))) %>% cbind(.,trsf)
} else{
new_col <- paste0("Location.",zonas[[i]]$Location %>% levels())
zonas[[i]][new_col] <- rep(1,1271)
zonas[[i]] <- zonas[[i]] %>% select(., -any_of(c("Location")))
}
zonas[[i]][,c("RainToday","RainTomorrow")] <- lapply(zonas[[i]][,c("RainToday","RainTomorrow")],function(x) as.numeric(x)-1) %>% as.data.frame()
}
# names(zonas[[8]])[names(zonas[[8]]) == "Location"] <- paste0("Location.",zonas[[8]]$Location %>% levels())
#zonas[[8]] <- zonas[[8]] %>% select(., -any_of(c("Location")))
#zonas[[8]][,c("RainToday","RainTomorrow")] <- lapply(zonas[[8]][,c("RainToday","RainTomorrow")],function(x) as.numeric(x)-1) %>% as.data.frame()
# zonas[[1]] %>% head() %>% View()
# Chunk 30: Fig-10
p <- ggdraw() +draw_image(paste0("../pics/Classification-of-wind-directions.png"))
p
# Chunk 31: Tab-10
radianes <- list("E"=0,"ENE"=pi/8, "NE"=pi/4, "NNE"=3*pi/8,
"N" = pi/2,"NNW"=5*pi/8,"NW"=3*pi/4,"WNW"=7*pi/8,
"W"=pi,"WSW"=9*pi/8,"SW"=5*pi/4,"SSW"=11*pi/8,
"S"=3*pi/2,"SSE"=13*pi/8,"SE"=7*pi/4,"ESE"=15*pi/8)
for(i in 1:length(zonas)){ # transformamos en ángulos
zonas[[i]] <- zonas[[i]] %>% transform(., WindGustDir=radianes[as.character(zonas[[i]]$WindGustDir)])
zonas[[i]]<-zonas[[i]] %>% mutate(., WindGustDir_x=lapply(zonas[[i]]$WindGustDir,cos)) #componente x
zonas[[i]]<-zonas[[i]] %>% mutate(., WindGustDir_y=lapply(zonas[[i]]$WindGustDir,sin)) #componente y
zonas[[i]] <- zonas[[i]] %>% transform(., WindDir9am=radianes[as.character(zonas[[i]]$WindDir9am)])
zonas[[i]] <- zonas[[i]] %>% mutate(., WindDir9am_x=lapply(zonas[[i]]$WindDir9am,cos)) #componente x
zonas[[i]] <- zonas[[i]] %>% mutate(., WindDir9am_y=lapply(zonas[[i]]$WindDir9am,sin)) #componente y
zonas[[i]] <- zonas[[i]] %>% transform(., WindDir3pm=radianes[as.character(zonas[[i]]$WindDir3pm)])
zonas[[i]] <- zonas[[i]] %>% mutate(., WindDir3pm_x=lapply(zonas[[i]]$WindDir3pm,cos)) #componente x
zonas[[i]] <- zonas[[i]] %>% mutate(., WindDir3pm_y=lapply(zonas[[i]]$WindDir3pm,sin)) #componente y
zonas[[i]] <- zonas[[i]] %>% select(., -any_of(c("WindGustDir","WindDir9am","WindDir3pm")))
new_vars <- c("WindGustDir_x","WindGustDir_y","WindDir9am_x","WindDir9am_y","WindDir3pm_x","WindDir3pm_y")
zonas[[i]][,new_vars] <- lapply(zonas[[i]][,new_vars],as.numeric) %>% as.data.frame()
# Las multiplicamos por la intensidad respectiva del viento:
#
zonas[[i]] <- zonas[[i]] %>% rowwise() %>% mutate(., WindGustDir_x=WindGustDir_x * WindGustSpeed)
zonas[[i]] <- zonas[[i]] %>% rowwise() %>% mutate(., WindDir9am_x=WindDir9am_x * WindSpeed9am)
zonas[[i]] <- zonas[[i]] %>% rowwise() %>% mutate(., WindDir3pm_x=WindDir3pm_x * WindSpeed3pm)
zonas[[i]] <- zonas[[i]] %>% rowwise() %>% mutate(., WindGustDir_y=WindGustDir_y * WindGustSpeed)
zonas[[i]] <- zonas[[i]] %>% rowwise() %>% mutate(., WindDir9am_y=WindDir9am_y * WindSpeed9am)
zonas[[i]] <- zonas[[i]] %>% rowwise() %>% mutate(., WindDir3pm_y=WindDir3pm_y * WindSpeed3pm)
zonas[[i]] <- zonas[[i]] %>% select(., -any_of(c("WindGustSpeed","WindSpeed9am","WindSpeed3pm")))
}
zonas[[i]] %>% head() %>% kbl(., booktabs = T, caption = "Conversión de variables de viento") %>% kable_styling(latex_options = c("striped","HOLD_position","scale_down"))
# Chunk 32: Tab-11
for(i in 1:length(zonas)){
columnas_numericas <- zonas[[i]][, unlist(lapply(zonas[[i]], is.numeric), use.names = FALSE) ] %>% colnames()
locations <- grep("^Location.[a-zA-Z0-9]*", columnas_numericas, value = TRUE)
columnas_numericas <- columnas_numericas[! columnas_numericas %in% c(locations,"RainToday","RainTomorrow")]
zonas[[i]][,columnas_numericas] <- lapply(zonas[[i]][,columnas_numericas],function(x) (x-mean(x))/(sd(x))) %>% as.data.frame()
}
columnas_numericas <- zonas[[3]][, unlist(lapply(zonas[[3]], is.numeric), use.names = FALSE) ] %>% colnames()
zonas[[3]] %>% head() %>% kbl(., booktabs = T, caption = "Variables normalizadas a 0-1 -- Zona 3") %>% kable_styling(latex_options = c("striped","HOLD_position","scale_down"))
# Chunk 34
i <- 1
ps <- list()
# Seleccionamos las columnas location
locations <- grep("^Location.[a-zA-Z0-9]*", colnames(zonas[[i]]), value = TRUE)
# Creamos la columna Location
col_vec <- c()
for(loc_name in locations){
Location_name <- loc_name %>% strsplit(.,'.',fixed=TRUE)
Location_name <- Location_name[[1]][2]
col_vec <- c(col_vec,rep(Location_name,1271))
}
# Filtramos la serie temporal por el ultimo año, añadimos la columna Location y eliminamos las variables one hot
db_filtered <- zonas[[i]]
db_filtered["Location"] <- col_vec %>% as.factor()
db_filtered <- db_filtered %>% filter(.,Date>= as.Date("2017-01-01"))%>% select(.,-all_of(locations))
# ts variables
ts_cols <- db_filtered %>% colnames() %>% setdiff(.,c("Date","RainToday","RainTomorrow","Location"))
for(colu in ts_cols){
# New plot
p <- ggplot(db_filtered, aes_string(x="Date", y=colu, color="Location")) + geom_line(aes(color = Location), size = 0.2) + theme(
axis.text.x = element_text(size=6),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.25, 'cm'),
legend.text = element_text(size=8),
legend.title = element_text(face = "bold",size=8),
legend.position="top")
ps[[colu]] <- p #añadimos plot a la lista
}
# new_name <- paste0("zona",as.character(i))
# plots_list[[new_name]] <- ggarrange(plotlist =  ps, nrow = length(ts_cols)/2,ncol = 2,common.legend = TRUE)
# ggexport(plots_list[new_name],filename = paste0("../pics/plots/ts/ts0",as.character(i),".png"),width = 723, height = 452)
# dev.off()
# Chunk 35: Fig-11
p <- ps[1]
p
# Chunk 36: Fig-12
p <- ps[2]
p
# Chunk 37: Fig-13
p <- ps[3]
p
# Chunk 38: Fig-14
p <- ps[4]
p
# Chunk 39: Fig-15
p <- ps[5]
p
# Chunk 40: Fig-16
p <- ps[6]
p
# Chunk 41: Fig-17
p <- ps[7]
p
# Chunk 42: Fig-18
p <- ps[8]
p
# Chunk 43: Fig-19
p <- ps[9]
p
# Chunk 44: Fig-20
p <- ps[10]
p
# Chunk 45: Fig-21
p <- ps[11]
p
# Chunk 46: Fig-22
p <- ps[12]
p
# Chunk 47: Fig-23
p <- ps[13]
p
last_dbs <- list()
for(i in 1:length(zonas)){
locations <- grep("^Location.[a-zA-Z0-9]*", colnames(zonas[[i]]), value = TRUE)
columnas_numericas <- zonas[[i]][, unlist(lapply(zonas[[i]], is.numeric), use.names = FALSE) ] %>% colnames()
columnas_numericas <- setdiff(columnas_numericas,locations)
city_indices <- which(colnames(zonas[[i]]) %in% locations)
window_dfs <- list()
for(city_index in city_indices){
db_filtered <- zonas[[i]] %>% filter(if_any(city_index, ~ . == 1)) %>% select(.,-locations)
window_df <- db_filtered %>% tq_mutate(
# tq_mutate args
select     = columnas_numericas,
mutate_fun = rollapply,
# rollapply args
width      = 7,
align      = "right",
FUN        = mean,
# mean args
na.rm      = TRUE,
# tq_mutate args
col_rename = paste0(columnas_numericas,"_mean7"))
for(city in locations){
if(which(colnames(zonas[[i]]) == city)==city_index){
window_df[city] <- rep(1,1271)
} else {
window_df[city] <- rep(0,1271)
}
}
for(new_var in paste0(columnas_numericas,"_mean7")){
new_var_mean <- window_df[[new_var]] %>% mean(.,na.rm=TRUE)
window_df[new_var] <- replace_na(window_df[new_var],new_var_mean)
}
window_dfs[[as.character(city_index)]] <- window_df
}
new_df <- bind_rows(window_dfs) %>% select(.,-Date)
last_dbs[[i]] <- new_df
print(paste0("Exito ",as.character(i)))
}
last_dbs[[8]]
last_dbs[[8]] %>% View()
last_dbs[[7]] %>% View()
