print(tuned_radmod03_sum)
print(paste0("Error promedio: ",tuned_radmod03_sum$performances$error %>% mean(),
". Desv. típica del error: ", tuned_radmod03_sum$performances$error %>% sd()))
}
tuned_radmod03
svmfit <- tuned_radmod03$best.model
plot(svmfit , st_train)
saved_dbs <- list.files("../dbs/model_db/")
if("df_final.Rds" %in% saved_dbs){
df_final <- readRDS(file="../dbs/model_db/df_final.Rds")
} else {
df_final$Class <- as.factor(df_final$Class)
saveRDS(df_final, file="../dbs/model_db/df_final.Rds")
}
# Creamos los conjuntos de entrenamiento y test
df_final$id <- 1:nrow(df_final)
set.seed(210)
train <- df_final %>% dplyr::sample_frac(.75)
test  <- dplyr::anti_join(df_final, train, by = 'id')
# Eliminamos la columna id
train <- train[,!(names(train) %in% c("id"))]
test <- test[,!(names(test) %in% c("id"))]
# Estandarizamos el conjunto de entrenamiento.
st_train <- scale(train[,1:(ncol(train)-1)],center = TRUE, scale = TRUE) %>% as.data.frame()
st_train$Class <- train$Class # Espero estar incluyendo la clase en el mismo orden. Revisar.
# Calculamos el vector de medias y el vector de desviaciones estándar del conjunto train.
means <- train %>% summarise_if(is.numeric, mean)
st.devs <- train %>% summarise_if(is.numeric, sd)
# Restamos las medias y dividimos por las desviaciones estándar
st_test <- scale(test[,1:(ncol(test)-1)],center = means, scale = st.devs) %>% as.data.frame()
st_test$Class <- test$Class
plot(svmfit , st_train)
plot(svmfit$ , st_train, Class~.)
plot(svmfit , st_train, Class~.)
plot(svmfit , data=st_train)
plot(svmfit , st_train, Class~.)
st_train %>% sapply(class)
st_train %>%  mutate_if(is.factor, funs(as.numeric(as.character(.))))
st_train$Class
st_train$Class %>% as.numeric()
st_train$Class %>% as.character() %>% as.numeric()
st_train$Class <- st_train$Class %>% as.numeric()
plot(svmfit , st_train, Class~.)
plot(svmfit , st_train, Class~Area + Perimeter)
plot(svmfit , st_train, st_train$Class~st_train$Area + st_train$Perimeter)
plot(svmfit , st_train, st_train$Class~st_train$Area + st_train$Perimeter+st_train$Major_Axis_Length+st_train$Minor_Axis_Length+st_train$Convex_Area)
tuned_radmod03$best.parameters
svmfit <-  svm(st_train$Class~., data=st_train, kernel ="radial",gamma =0.03125, cost=64)
plot(svmfit , st_train)
plot(svmfit , st_train)
plot(svmfit , st_train, st_train$Class~st_train$Area + st_train$Perimeter)
tuned_radmod03$best.parameters
tuned_radmod03$best.parameters$gamma
st_train$Class <- st_train$Class %>% as.numeric()
svmfit <-  svm(st_train$Class~., data=st_train,
kernel ="radial",
gamma =tuned_radmod03$best.parameters$gamma,
cost=tuned_radmod03$best.parameters$cost)
plot(svmfit , st_train)
plot(svmfit , st_train)
plot(svmfit , st_train)
p <- plot(svmfit , st_train)
print(p)
p <- plot(svmfit , st_train, formula = st_train$Class~.)
print(p)
?plot.svm
data(st_train)
st_train %>% data("bnr")
?data
p <- plot(svmfit , st_train, formula = Area~Perimeter)
p
p <- plot(svmfit , st_train, formula = st_train$Area~st_train$Perimeter)
p
library(readr)
car <- read.csv("~/Desktop/RTG/dataset/car.data.txt", header = F)
# V7: unacc, acc, good, vgood
roww <- nrow(car)
coll <- ncol(car)
numTrain <- floor((2/3) * roww)
numTest <- roww - numTrain
training <- car[sample(roww, numTrain), ]
library(readr)
cars
install.packages(c("dbplyr", "globals", "pkgload", "R.utils", "rlang"))
install.packages(c("dbplyr", "globals", "pkgload", "R.utils", "rlang"))
install.packages('tinytex')
setwd("~/Documents/MUM/TFM/code/source")
# Chunk 1
library(tidyverse)
library(kableExtra)
# Chunk 2
x <- "rep(\"---\", 6)"
xnew <- "---"
db <- read.csv("../db/weatherAUS.csv", stringsAsFactors = TRUE)
db$Date <- as.Date(db$Date, format="%Y-%m-%d")
attach(db)
db %>% head() %>%  select(-c(6:19)) %>% add_column(.,rep("---",6),.after = 5) %>% rename(., !!xnew := !!rlang::sym(x)) %>% kbl(., booktabs = T,caption = "Muestra de los datos[note]",) %>% kable_styling(latex_options = c("striped", "scale_down"))
# Voy a descomponer en:
# - trend
# - seasonality
# - noise
#
# SMA(n):moving average of last n days --> smoothing
# decompose()
# Chunk 3: Tipos de datos
str(db)
# Chunk 4: Rangos de fechas
min_fec <- c()
max_fec <- c()
obs <- c()
rep <- c()
for(city in levels(db$Location)){
db_filtered <- db %>% filter(.,Location==city)
mind <- format(as.Date(min(db_filtered$Date),format="%Y-%m-%d"))
min_fec <- c(min_fec,mind)
maxd <- format(as.Date(max(db_filtered$Date),format="%Y-%m-%d"))
max_fec <- c(max_fec,maxd)
obs <- c(obs,length(db_filtered$Date))
rep <- c(rep,length(unique(db_filtered$Date))==length(db_filtered$Date))
}
dates_df <- data.frame(min_fec,max_fec,obs,rep)
dates_df$min_fec <- as.Date(dates_df$min_fec, format="%Y-%m-%d")
dates_df$max_fec <- as.Date(dates_df$max_fec, format="%Y-%m-%d")
dates_df <- mutate(dates_df, range = max_fec - min_fec)
dates_df$años <- (dates_df$range / 365) %>% as.integer()
dates_df$dias <- as.integer(dates_df$range)-365*(dates_df$años)
rownames(dates_df) <- levels(db$Location)
db_types <- str(db)
db_types
typeof(str(db))
?utils::str
op <- options(); str(op)
t <- seq(as.Date("2014/1/1"), as.Date("2014/1/10"), "days")
p <- seq(as.Date("2014/1/1"), as.Date("2014/1/8"), "days")
setdiff(t,p)
format(as.Date(16079,format="%Y-%m-%d"))
setdiff(t,p) %>% as.Date()
typeof(t)
t
t <- as.Date(t)
typeof(t)
t
?setdiff
setdiff(t,p) %>% as.Date(., origin="1970-01-01")
db_filtered$Date
max(db_filtered$Date)
# Chunk 1
library(tidyverse)
library(kableExtra)
# Chunk 2
x <- "rep(\"---\", 6)"
xnew <- "---"
db <- read.csv("../db/weatherAUS.csv", stringsAsFactors = TRUE)
db$Date <- as.Date(db$Date, format="%Y-%m-%d")
attach(db)
db %>% head() %>%  select(-c(6:19)) %>% add_column(.,rep("---",6),.after = 5) %>% rename(., !!xnew := !!rlang::sym(x)) %>% kbl(., booktabs = T,caption = "Muestra de los datos[note]",) %>% kable_styling(latex_options = c("striped", "scale_down"))
# Voy a descomponer en:
# - trend
# - seasonality
# - noise
#
# SMA(n):moving average of last n days --> smoothing
# decompose()
# Chunk 3: Tipos de datos
# Buscar manera alternativa (representable) de evaluar los tipos de dato.
str(db)
# Chunk 4: Rangos de fechas
min_fec <- c()
max_fec <- c()
obs <- c()
rep <- c()
n_diff_dates_vec <- c()
top_diff_date_vec <- c()
range_free_vec <- c()
for(city in levels(db$Location)){
# Filtramos el ds por ciudad
db_filtered <- db %>% filter(.,Location==city)
# Calculamos el minimo y el máximo de la variable Date
mind <- format(as.Date(min(db_filtered$Date),format="%Y-%m-%d"))
min_fec <- c(min_fec,mind)
maxd <- format(as.Date(max(db_filtered$Date),format="%Y-%m-%d"))
max_fec <- c(max_fec,maxd)
# Comprobamos rangos de fecha
fech_range <- seq(mind, maxd, "days")
diff_dates <- setdiff(fech_range,db_filtered$Date) %>% as.Date(., origin="1970-01-01")
top_diff_date <- max(diff_dates)
top_diff_date_vec <- c(top_diff_date_vec,top_diff_date)
n_diff_dates <- length(diff_dates)
n_diff_dates_vec <- c(n_diff_dates_vec,n_diff_dates)
range_free <- seq(top_diff_date, maxd, "days") %>% length()
range_free_vec <- c(range_av_vec,range_free)
obs <- c(obs,length(db_filtered$Date))
rep <- c(rep,length(unique(db_filtered$Date))==length(db_filtered$Date))
}
dates_df <- data.frame(min_fec,max_fec,obs,rep,n_diff_dates_vec,top_diff_date_vec,range_free_vec)
dates_df$min_fec <- as.Date(dates_df$min_fec, format="%Y-%m-%d")
dates_df$max_fec <- as.Date(dates_df$max_fec, format="%Y-%m-%d")
dates_df <- mutate(dates_df, range = max_fec - min_fec)
dates_df$años <- (dates_df$range / 365) %>% as.integer()
dates_df$dias <- as.integer(dates_df$range)-365*(dates_df$años)
rownames(dates_df) <- levels(db$Location)
# Chunk 5: Evaluamos rangos de fechas
for(city in levels(db$Location)){
db_filtered <- db %>% filter(.,Location==city)
}
dates_df %>% View()
min_fec <- c()
max_fec <- c()
obs <- c()
rep <- c()
n_diff_dates_vec <- c()
top_diff_date_vec <- c()
range_free_vec <- c()
for(city in levels(db$Location)){
# Filtramos el ds por ciudad
db_filtered <- db %>% filter(.,Location==city)
# Calculamos el minimo y el máximo de la variable Date
mind <- format(as.Date(min(db_filtered$Date),format="%Y-%m-%d"))
min_fec <- c(min_fec,mind)
maxd <- format(as.Date(max(db_filtered$Date),format="%Y-%m-%d"))
max_fec <- c(max_fec,maxd)
# Comprobamos rangos de fecha
fech_range <- seq(mind, maxd, "days")
diff_dates <- setdiff(fech_range,db_filtered$Date) %>% as.Date(., origin="1970-01-01")
top_diff_date <- max(diff_dates)
top_diff_date_vec <- c(top_diff_date_vec,top_diff_date)
n_diff_dates <- length(diff_dates)
n_diff_dates_vec <- c(n_diff_dates_vec,n_diff_dates)
range_free <- seq(top_diff_date, maxd, "days") %>% length()
range_free_vec <- c(range_av_vec,range_free)
obs <- c(obs,length(db_filtered$Date))
rep <- c(rep,length(unique(db_filtered$Date))==length(db_filtered$Date))
}
dates_df <- data.frame(min_fec,max_fec,obs,rep,n_diff_dates_vec,top_diff_date_vec,range_free_vec)
dates_df$min_fec <- as.Date(dates_df$min_fec, format="%Y-%m-%d")
dates_df$max_fec <- as.Date(dates_df$max_fec, format="%Y-%m-%d")
dates_df <- mutate(dates_df, range = max_fec - min_fec)
dates_df$años <- (dates_df$range / 365) %>% as.integer()
dates_df$dias <- as.integer(dates_df$range)-365*(dates_df$años)
rownames(dates_df) <- levels(db$Location)
mind
seq(mind, maxd, "days")
mind
mind %>% toString()
seq(mind %>% toString(), maxd, "days")
seq("2008-07-01", maxd, "days")
seq(mind %>% as.Date(), maxd, "days")
seq(mind %>% as.Date(), maxd %>% as.Date(), "days")
# Chunk 1
library(tidyverse)
library(kableExtra)
# Chunk 2
x <- "rep(\"---\", 6)"
xnew <- "---"
db <- read.csv("../db/weatherAUS.csv", stringsAsFactors = TRUE)
db$Date <- as.Date(db$Date, format="%Y-%m-%d")
attach(db)
db %>% head() %>%  select(-c(6:19)) %>% add_column(.,rep("---",6),.after = 5) %>% rename(., !!xnew := !!rlang::sym(x)) %>% kbl(., booktabs = T,caption = "Muestra de los datos[note]",) %>% kable_styling(latex_options = c("striped", "scale_down"))
# Voy a descomponer en:
# - trend
# - seasonality
# - noise
#
# SMA(n):moving average of last n days --> smoothing
# decompose()
# Chunk 3: Tipos de datos
# Buscar manera alternativa (representable) de evaluar los tipos de dato.
str(db)
# Chunk 4: Rangos de fechas
min_fec <- c()
max_fec <- c()
obs <- c()
rep <- c()
n_diff_dates_vec <- c()
top_diff_date_vec <- c()
range_free_vec <- c()
for(city in levels(db$Location)){
# Filtramos el ds por ciudad
db_filtered <- db %>% filter(.,Location==city)
# Calculamos el minimo y el máximo de la variable Date
mind <- format(as.Date(min(db_filtered$Date),format="%Y-%m-%d"))
min_fec <- c(min_fec,mind)
maxd <- format(as.Date(max(db_filtered$Date),format="%Y-%m-%d"))
max_fec <- c(max_fec,maxd)
# Comprobamos rangos de fecha
fech_range <- seq(mind %>% as.Date(), maxd %>% as.Date(), "days")
diff_dates <- setdiff(fech_range,db_filtered$Date) %>% as.Date(., origin="1970-01-01")
top_diff_date <- max(diff_dates)
top_diff_date_vec <- c(top_diff_date_vec,top_diff_date)
n_diff_dates <- length(diff_dates)
n_diff_dates_vec <- c(n_diff_dates_vec,n_diff_dates)
range_free <- seq(top_diff_date %>% as.Date(),maxd %>% as.Date(), "days") %>% length()
range_free_vec <- c(range_free_vec,range_free)
obs <- c(obs,length(db_filtered$Date))
rep <- c(rep,length(unique(db_filtered$Date))==length(db_filtered$Date))
}
dates_df <- data.frame(min_fec,max_fec,obs,rep,n_diff_dates_vec,top_diff_date_vec,range_free_vec)
dates_df$min_fec <- as.Date(dates_df$min_fec, format="%Y-%m-%d")
dates_df$max_fec <- as.Date(dates_df$max_fec, format="%Y-%m-%d")
dates_df <- mutate(dates_df, range = max_fec - min_fec)
dates_df$años <- (dates_df$range / 365) %>% as.integer()
dates_df$dias <- as.integer(dates_df$range)-365*(dates_df$años)
rownames(dates_df) <- levels(db$Location)
# Chunk 5: Evaluamos rangos de fechas
for(city in levels(db$Location)){
db_filtered <- db %>% filter(.,Location==city)
}
top_diff_date
diff_dates
diff_dates %>% length()
# Chunk 1
library(tidyverse)
library(kableExtra)
# Chunk 2
x <- "rep(\"---\", 6)"
xnew <- "---"
db <- read.csv("../db/weatherAUS.csv", stringsAsFactors = TRUE)
db$Date <- as.Date(db$Date, format="%Y-%m-%d")
attach(db)
db %>% head() %>%  select(-c(6:19)) %>% add_column(.,rep("---",6),.after = 5) %>% rename(., !!xnew := !!rlang::sym(x)) %>% kbl(., booktabs = T,caption = "Muestra de los datos[note]",) %>% kable_styling(latex_options = c("striped", "scale_down"))
# Voy a descomponer en:
# - trend
# - seasonality
# - noise
#
# SMA(n):moving average of last n days --> smoothing
# decompose()
# Chunk 3: Tipos de datos
# Buscar manera alternativa (representable) de evaluar los tipos de dato.
str(db)
# Chunk 4: Rangos de fechas
min_fec <- c()
max_fec <- c()
obs <- c()
rep <- c()
n_diff_dates_vec <- c()
top_diff_date_vec <- c()
range_free_vec <- c()
for(city in levels(db$Location)){
# Filtramos el ds por ciudad
db_filtered <- db %>% filter(.,Location==city)
# Calculamos el minimo y el máximo de la variable Date
mind <- format(as.Date(min(db_filtered$Date),format="%Y-%m-%d"))
min_fec <- c(min_fec,mind)
maxd <- format(as.Date(max(db_filtered$Date),format="%Y-%m-%d"))
max_fec <- c(max_fec,maxd)
# Comprobamos rangos de fecha
fech_range <- seq(mind %>% as.Date(), maxd %>% as.Date(), "days")
diff_dates <- setdiff(fech_range,db_filtered$Date) %>% as.Date(., origin="1970-01-01")
if(length(diff_dates)>0){
top_diff_date <- max(diff_dates)
top_diff_date_vec <- c(top_diff_date_vec,top_diff_date)
n_diff_dates <- length(diff_dates)
n_diff_dates_vec <- c(n_diff_dates_vec,n_diff_dates)
range_free <- seq(top_diff_date %>% as.Date(),maxd %>% as.Date(), "days") %>% length()
range_free_vec <- c(range_free_vec,range_free)
} else {
top_diff_date_vec <- c(top_diff_date_vec,NA)
n_diff_dates_vec <- c(n_diff_dates_vec,0)
range_free_vec <- c(range_free_vec,NA)
}
obs <- c(obs,length(db_filtered$Date))
rep <- c(rep,length(unique(db_filtered$Date))==length(db_filtered$Date))
}
dates_df <- data.frame(min_fec,max_fec,obs,rep,n_diff_dates_vec,top_diff_date_vec,range_free_vec)
dates_df$min_fec <- as.Date(dates_df$min_fec, format="%Y-%m-%d")
dates_df$max_fec <- as.Date(dates_df$max_fec, format="%Y-%m-%d")
dates_df <- mutate(dates_df, range = max_fec - min_fec)
dates_df$años <- (dates_df$range / 365) %>% as.integer()
dates_df$dias <- as.integer(dates_df$range)-365*(dates_df$años)
rownames(dates_df) <- levels(db$Location)
# Chunk 5: Evaluamos rangos de fechas
for(city in levels(db$Location)){
db_filtered <- db %>% filter(.,Location==city)
}
dates_df %>% View()
# Chunk 1
library(tidyverse)
library(kableExtra)
# Chunk 2
x <- "rep(\"---\", 6)"
xnew <- "---"
db <- read.csv("../db/weatherAUS.csv", stringsAsFactors = TRUE)
db$Date <- as.Date(db$Date, format="%Y-%m-%d")
attach(db)
db %>% head() %>%  select(-c(6:19)) %>% add_column(.,rep("---",6),.after = 5) %>% rename(., !!xnew := !!rlang::sym(x)) %>% kbl(., booktabs = T,caption = "Muestra de los datos[note]",) %>% kable_styling(latex_options = c("striped", "scale_down"))
# Voy a descomponer en:
# - trend
# - seasonality
# - noise
#
# SMA(n):moving average of last n days --> smoothing
# decompose()
# Chunk 3: Tipos de datos
# Buscar manera alternativa (representable) de evaluar los tipos de dato.
str(db)
# Chunk 4: Rangos de fechas
min_fec <- c()
max_fec <- c()
obs <- c()
rep <- c()
n_diff_dates_vec <- c()
top_diff_date_vec <- c()
range_free_vec <- c()
for(city in levels(db$Location)){
# Filtramos el ds por ciudad
db_filtered <- db %>% filter(.,Location==city)
# Calculamos el minimo y el máximo de la variable Date
mind <- format(as.Date(min(db_filtered$Date),format="%Y-%m-%d"))
min_fec <- c(min_fec,mind)
maxd <- format(as.Date(max(db_filtered$Date),format="%Y-%m-%d"))
max_fec <- c(max_fec,maxd)
# Comprobamos rangos de fecha
fech_range <- seq(mind %>% as.Date(), maxd %>% as.Date(), "days")
diff_dates <- setdiff(fech_range,db_filtered$Date) %>% as.Date(., origin="1970-01-01")
if(length(diff_dates)>0){
top_diff_date <- max(diff_dates) %>% as.Date(., origin="1970-01-01")
top_diff_date_vec <- c(top_diff_date_vec,top_diff_date)
n_diff_dates <- length(diff_dates)
n_diff_dates_vec <- c(n_diff_dates_vec,n_diff_dates)
range_free <- seq(top_diff_date %>% as.Date(),maxd %>% as.Date(), "days") %>% length()
range_free_vec <- c(range_free_vec,range_free)
} else {
top_diff_date_vec <- c(top_diff_date_vec,NA)
n_diff_dates_vec <- c(n_diff_dates_vec,0)
range_free_vec <- c(range_free_vec,NA)
}
obs <- c(obs,length(db_filtered$Date))
rep <- c(rep,length(unique(db_filtered$Date))==length(db_filtered$Date))
}
dates_df <- data.frame(min_fec,max_fec,obs,rep,n_diff_dates_vec,top_diff_date_vec,range_free_vec)
dates_df$min_fec <- as.Date(dates_df$min_fec, format="%Y-%m-%d")
dates_df$max_fec <- as.Date(dates_df$max_fec, format="%Y-%m-%d")
dates_df <- mutate(dates_df, range = max_fec - min_fec)
dates_df$años <- (dates_df$range / 365) %>% as.integer()
dates_df$dias <- as.integer(dates_df$range)-365*(dates_df$años)
rownames(dates_df) <- levels(db$Location)
# Chunk 5: Evaluamos rangos de fechas
for(city in levels(db$Location)){
db_filtered <- db %>% filter(.,Location==city)
}
dates_df %>% View()
top_diff_date
# Chunk 1
library(tidyverse)
library(kableExtra)
# Chunk 2
x <- "rep(\"---\", 6)"
xnew <- "---"
db <- read.csv("../db/weatherAUS.csv", stringsAsFactors = TRUE)
db$Date <- as.Date(db$Date, format="%Y-%m-%d")
attach(db)
db %>% head() %>%  select(-c(6:19)) %>% add_column(.,rep("---",6),.after = 5) %>% rename(., !!xnew := !!rlang::sym(x)) %>% kbl(., booktabs = T,caption = "Muestra de los datos[note]",) %>% kable_styling(latex_options = c("striped", "scale_down"))
# Voy a descomponer en:
# - trend
# - seasonality
# - noise
#
# SMA(n):moving average of last n days --> smoothing
# decompose()
# Chunk 3: Tipos de datos
# Buscar manera alternativa (representable) de evaluar los tipos de dato.
str(db)
# Chunk 4: Rangos de fechas
min_fec <- c()
max_fec <- c()
obs <- c()
rep <- c()
n_diff_dates_vec <- c()
top_diff_date_vec <- c()
range_free_vec <- c()
for(city in levels(db$Location)){
# Filtramos el ds por ciudad
db_filtered <- db %>% filter(.,Location==city)
# Calculamos el minimo y el máximo de la variable Date
mind <- format(as.Date(min(db_filtered$Date),format="%Y-%m-%d"))
min_fec <- c(min_fec,mind)
maxd <- format(as.Date(max(db_filtered$Date),format="%Y-%m-%d"))
max_fec <- c(max_fec,maxd)
# Comprobamos rangos de fecha
fech_range <- seq(mind %>% as.Date(), maxd %>% as.Date(), "days")
diff_dates <- setdiff(fech_range,db_filtered$Date) %>% as.Date(., origin="1970-01-01")
if(length(diff_dates)>0){
top_diff_date <- max(diff_dates) %>% as.Date(., origin="1970-01-01")
top_diff_date_vec <- c(top_diff_date_vec,top_diff_date)
n_diff_dates <- length(diff_dates)
n_diff_dates_vec <- c(n_diff_dates_vec,n_diff_dates)
range_free <- seq(top_diff_date %>% as.Date(),maxd %>% as.Date(), "days") %>% length()
range_free_vec <- c(range_free_vec,range_free)
} else {
top_diff_date_vec <- c(top_diff_date_vec,NA)
n_diff_dates_vec <- c(n_diff_dates_vec,0)
range_free_vec <- c(range_free_vec,NA)
}
obs <- c(obs,length(db_filtered$Date))
rep <- c(rep,length(unique(db_filtered$Date))==length(db_filtered$Date))
}
dates_df <- data.frame(min_fec,max_fec,obs,rep,n_diff_dates_vec,top_diff_date_vec,range_free_vec)
dates_df$min_fec <- as.Date(dates_df$min_fec, format="%Y-%m-%d")
dates_df$max_fec <- as.Date(dates_df$max_fec, format="%Y-%m-%d")
dates_df <- mutate(dates_df, range = max_fec - min_fec)
dates_df$años <- (dates_df$range / 365) %>% as.integer()
dates_df$dias <- as.integer(dates_df$range)-365*(dates_df$años)
dates_df$top_diff_date_vec <- dates_df$top_diff_date_vec %>% as.Date(., origin="1970-01-01")
rownames(dates_df) <- levels(db$Location)
# Chunk 5: Evaluamos rangos de fechas
for(city in levels(db$Location)){
db_filtered <- db %>% filter(.,Location==city)
}
dates_df %>% View()
1580 / 365
db %>% head() %>% View()
